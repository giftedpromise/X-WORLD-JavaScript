//DAY ONE - INTRODUCTION

//A variable is a “named storage” for data. To create a variable in JavaScript, use the let, const or var keyword.
//We can declare variables to store data by using the var, let, or const keywords.
let message; //variable declaration
message = "Hello, world";
alert(message); // shows the variable content

//To be concise, we can combine the variable declaration and assignment into a single line:

// Declaring different variables of different data types

let firstName = "Asabeneh"; // first name of a person
let lastName = "Yetayeh"; // last name of a person
let country = "Finland"; // country
let city = "Helsinki"; // capital city
let age = 100; // age in years
let isMarried = true;

// Declaring variables with number values

const gravity = 9.81; // earth gravity  in m/s2
const boilingPoint = 100; // water boiling point, temperature in oC
const PI = 3.14; // geometrical constant

// Variables can also be declaring in one line separated by comma

let name = "Asabeneh", //name of a person
  job = "teacher",
  live = "Finland";

//DAY TWO - DATA TYPE

/*

  Data types can be divided into two:

Primitive data types
Non-primitive data types(Object References): Non-primitive data types are modifiable or mutable.
 We can modify the value of non-primitive data types after it gets created.  we do not compare non-primitive data types. Do not compare arrays, functions, or objects. Non-primitive values are referred to as reference types, because they are being compared by reference instead of value.
  Two objects are only strictly equal if they refer to the same underlying object.
Primitive Data Types: Primitive data types are immutable(non-modifiable) data types. 
Once a primitive data type is created we cannot modify it.

Primitive data types in JavaScript include:

Numbers - Integers, floats
Strings - Any data under single quote, double quote or backtick quote
Booleans - true or false value
Null - empty value or no value
Undefined - a declared variable without a value
Symbol - A unique value that can be generated by Symbol constructor

Non-primitive data types in JavaScript includes:

Objects
Arrays

*/

//Non-primitive Data type

let nums = [1, 2, 3];
nums[0] = 10;

console.log(nums); // [10, 2, 3]

let userTwo = {
  name: "Asabeneh",
  role: "teaching",
  country: "Finland",
};

//Numbers
//Numbers are integers and decimal values which can do all the arithmetic operations.
let age1 = 35;
const gravity1 = 9.81; // we use const for non-changing values, gravitational constant in  m/s2
let mass = 72; // mass in Kilogram

// More Examples
const boilingPoint1 = 100; // temperature in oC, boiling point of water which is a constant
const bodyTemp = 37; // oC average human body temperature, which is a constant

console.log(age, gravity, mass, PI, boilingPoint, bodyTemp);

//Random Number Generator
//The JavaScript Math Object has a random() method number generator which generates number from 0 to 0.999999999...

let randomNum = Math.random();
let numBtnZeroAndTen = randomNum * 11;
console.log(numBtnZeroAndTen);
let randomNumRoundToFloor = Math.floor(numBtnZeroAndTen);

console.log(randomNumRoundToFloor);

//Strings

//Strings are texts, which are under single , double, back-tick quote.
//To declare a string, we need a variable name, assignment operator, a value under a single quote, double quote, or backtick quote.
let language = "JavaScript";
let fruit = "Mango";
let quote = "The saying,'Seeing is Believing' is not correct in 2020.";
let quotWithBackTick = `The saying,'Seeing is Believing' is not correct in 2020.`;

//String Concatenation

//Connecting two or more strings together is called concatenation.

let fullName = firstName + " " + lastName; // Concatenating Using Addition Operator
console.log(fullName);

let personInfoOne =
  "My name is " +
  fullName +
  ", I am " +
  age +
  " years old" +
  " I am from" +
  country;
console.log(personInfoOne);

/*

Long Literal Strings
A string could be a single character or paragraph or a page. 
If the string length is too big it does not fit in one line. We can use the backslash character (\) at the end of each line to indicate that the string will continue on the next line.

*/

const paragraph =
  "My name is Asabeneh Yetayeh. I live in Finland, Helsinki.\
I am a teacher and I love teaching. I teach HTML, CSS, JavaScript, React, Redux, \
Node.js, Python, Data Analysis and D3.js for anyone who is interested to learn. \
In the end of 2019, I was thinking to expand my teaching and to reach \
to global audience and I started a Python challenge from November 20 - December 19.\
It was one of the most rewarding and inspiring experience.\
Now, we are in 2020. I am enjoying preparing the 30DaysOfJavaScript challenge and \
I hope you are enjoying too.";

console.log(paragraph);

/*Template Literals (Template Strings)
To create a template strings, we use two back-ticks.
 We can inject data as expressions inside a template string. 
To inject data, we enclose the expression with a curly bracket({}) preceded by a $ sign. 

*/

console.log(`The sum of 2 and 3 is 5`); // statically writing the data
let a = 2;
let b = 3;
console.log(`The sum of ${a} and ${b} is ${a + b}`); // injecting the data dynamically

let personInfoTwo = `I am ${fullName}. I am ${age}. I live in ${country}.`; //ES6 - String interpolation method
let personInfoThree = `I am ${fullName}. I live in ${city}, ${country}. I am a ${job}. I teach ${language}.`;
console.log(personInfoTwo);
console.log(personInfoThree);

//Syntax
`string literal expression`;
//`String literal text ${expression}`;

let ab = 2;
let ba = 3;

console.log(`${ab} is greater than ${ba}: ${ab > ba}`);

//String Methods

//length: The string length method returns the number of characters in a string included empty space.
let js = "JavaScript";
console.log(js.length);

console.log(firstName.length);

//Accessing characters in a string: We can access each character in a string using its index.
// In programming, counting starts from 0.
// The first index of the string is zero, and the last index is the length of the string minus one.

let string = "JavaScript";

let firstLetter = string[0];
console.log(firstLetter);

let thirdLetter = string[2];
console.log(thirdLetter);

let lastLetter = string[9];
console.log(lastLetter);

let lastIndex = string.length - 1;
console.log(string[lastIndex]);

//toUpperCase(): this method changes the string to uppercase letters.

let upperCase = string.toUpperCase();
console.log(upperCase);

//toLowerCase(): this method changes the string to lowercase letters.

let lowerCase = string.toLowerCase();
console.log(lowerCase);

//substr(): It takes two arguments, the starting index and number of characters to slice.
const text = "Hello, world!";
const part = text.substr(7, 5); // Starting at index 7, extract 5 characters
console.log(part); // Output will be "world"

console.log(string.substr(4, 5));

//substring(): It takes two arguments, the starting index and the stopping index
//but it doesn't include the character at the stopping index.

console.log(string.substring(0, 4)); // Java
console.log(string.substring(4, 10)); // Script

let countries = "Finland, Sweden, Norway, Denmark, and Iceland";

let newCountries = countries.split();
console.log(newCountries);
console.log(countries.split(", "));

const texts = "apple,banana,cherry,dragonfruit";
const fruits = texts.split(",", 2); // Split at each comma, but limit to 2 elements
console.log(fruits); // Output will be ["apple", "banana"]

//trim(): Removes trailing space in the beginning or the end of a string.

let string1 = "   30 Days Of JavaScript   ";
console.log(string1.trim());

//includes(): It takes a substring argument and it checks if substring argument exists in the string. includes() returns a boolean.
//If a substring exist in a string, it returns true, otherwise it returns false.

let string2 = "30 Days Of JavaScript";

console.log(string2.includes("Days"));
console.log(string2.includes("days")); // false - it is case sensitive!
console.log(string2.includes("Script")); // true
console.log(string2.includes("script")); // false
console.log(string2.includes("java")); // false
console.log(string2.includes("Java")); // true

//replace(): takes as a parameter the old substring and a new substring.

let string3 = "30 Days Of JavaScript";

console.log(string3.replace("JavaScript", "Python"));

//charAt(): Takes index and it returns the value at that index

console.log(string.charAt(3));

let lastIndex1 = string.length - 1;
console.log(string.charAt(lastIndex1)); // t

//DAY TWO CHALLENGE

let dayTwo = "EXERCISE TWO";
console.log(dayTwo);

//1. Declare a variable named challenge and assign it to an initial value '30 Days Of JavaScript'.

let answer = "30 Days Of JavaScript";

//2. Print the string on the browser console using console.log()
console.log(answer);

//3. Print the length of the string on the browser console using console.log()
console.log(answer.length);

//4. Change all the string characters to capital letters using toUpperCase() method
let answerUpper = answer.toUpperCase();
console.log(answerUpper);

//5. Change all the string characters to lowercase letters using toLowerCase() method
let answerLower = answer.toLowerCase();
console.log(answerLower);

//6. Cut (slice) out the first word of the string using substr() or substring() method
let slicedAnswer = answer.substr(0, 2);

console.log(slicedAnswer);

//Slice out the phrase Days Of JavaScript from 30 Days Of JavaScript.
let startIndex = answer.indexOf("Days");
let length = "Days Of JavaScript".length;

let extractedPhrase = answer.substr(startIndex, length);
console.log(extractedPhrase);

//DAY THREE
//TOPICS: Booleans, Operator and Dates

//Booleans: A boolean data type represents one of the two values:true or false.
//Boolean value is either true or false.

let isLightOn = true;
let isRaining = false;
let isHungry = false;

let truValue = 4 > 3; // true
let falseValue = 4 < 3; // false

/* Truthy values
All numbers(positive and negative) are truthy except zero
All strings are truthy except an empty string ('')
The boolean true

Falsy values
0
0n
null
undefined
NaN
the boolean false
'', "", ``, empty string


Undefined
If we declare a variable and if we do not assign a value, the value will be undefined. In addition to this, 
if a function is not returning the value, it will be undefined.

*/

let firstName1;
console.log(firstName1); //not defined, because it is not assigned to a value yet

//Null
let empty = null;
console.log(empty); // -> null , means no value

//OPERATORS

//Assignment operators
//An equal sign in JavaScript is an assignment operator. It uses to assign a variable.

let firstName2 = "Asabeneh";
let country1 = "Finland";

/* 
Arithmetic Operators
Arithmetic operators are mathematical operators.

Addition(+): a + b
Subtraction(-): a - b
Multiplication(*): a * b
Division(/): a / b
Modulus(%): a % b
Exponential(**): a ** b

*/

let numOne = 4;
let numTwo = 3;
let sum = numOne + numTwo;
let diff = numOne - numTwo;
let mult = numOne * numTwo;
let div = numOne / numTwo;
let remainder = numOne % numTwo;
let powerOf = numOne ** numTwo;

console.log(sum, diff, mult, div, remainder, powerOf); // 7,1,12,1.33,1, 64

//Comparison Operators
//In programming we compare values, we use comparison operators to compare two values.
//We check if a value is greater or less or equal to other value.

//Examples of comparison operators <, >, ==, !=, ===, !==, <=, >=

console.log(3 > 2); // true, because 3 is greater than 2
console.log(3 >= 2); // true, because 3 is greater than 2
console.log(3 < 2); // false,  because 3 is greater than 2
console.log(2 < 3); // true, because 2 is less than 3
console.log(2 <= 3); // true, because 2 is less than 3
console.log(3 == 2); // false, because 3 is not equal to 2
console.log(3 != 2); // true, because 3 is not equal to 2
console.log(3 == "3"); // true, compare only value
console.log(3 === "3");

//Logical Operators

//The following symbols are the common logical operators: &&(ampersand) , ||(pipe) and !(negation).
// The && operator gets true only if the two operands are true.
//The || operator gets true either of the operand is true.
// The ! operator negates true to false and false to true.

// && ampersand operator example

const check1 = 4 > 3 && 10 > 5; // true && true -> true
const check2 = 4 > 3 && 10 < 5; // true && false -> false
const check3 = 4 < 3 && 10 < 5; // false && false -> false

// || pipe or operator, example

const check5 = 4 > 3 || 10 > 5; // true  || true -> true
const check6 = 4 > 3 || 10 < 5; // true  || false -> true
const check7 = 4 < 3 || 10 < 5; // false || false -> false

//! Negation examples

let check8 = 4 > 3; // true
let check9 = !(4 > 3); //  false
let isLightOn1 = true;
let isLightOff = !isLightOn; // false
let isMarried1 = !false; // true

//Increment Operator

//In JavaScript we use the increment operator to increase a value stored in a variable.
//The increment could be pre or post increment.

//Pre-increment
let count = 5;
console.log(++count); //6
console.log(count); //6

//Post-increment

let count1 = 5;
console.log(count1++); // 5
console.log(count1); // 6

//Decrement Operator
//In JavaScript we use the decrement operator to decrease a value stored in a variable.
//The decrement could be pre or post decrement.

//Pre-decrement (--variable)
let x = 5;
let result = --x; // x is decremented to 4 first, then result is set to 6
console.log(result); // Output: 4
console.log(x); // Output: 4

//Post-decrement (--variable)
let y = 5;
let result1 = y--; // result is set to 5 first, then y is decremented to 5
console.log(result1); // Output: 5
console.log(y); // Output: 4

//Ternary Operators: Ternary operator allows to write a condition.
let isRaining1 = true;
isRaining1
  ? console.log("You need a Rain coat.")
  : console.log("You don't need a Rain coat.");
isRaining1 = false;
isRaining1
  ? console.log("You need a Rain coat.")
  : console.log("You don't need a Rain coat.");

let number = 5;
number > 0
  ? console.log(`${number} is a positive mumber`)
  : console.log(`${number} is a negative mumber`);

number = -5;
number > 0
  ? console.log(`${number} is a positive mumber`)
  : console.log(`${number} is a negative mumber`);

/*
  Date Object
Time is an important thing. We like to know the time a certain activity or event. 
In JavaScript current time and date is created using JavaScript Date Object. 
The object we create using Date object provides many methods to work with date and time.
The methods we use to get date and time information from a date object values are started with a word get 
because it provide the information. 
getFullYear(), getMonth(), getDate(), getDay(), getHours(), 
getMinutes, getSeconds(), getMilliseconds(), getTime(), getDay()

*/

//Creating a time object

let now = new Date();
console.log(now);

//Get year
console.log(now.getFullYear());

//Get month
console.log(now.getMonth());

//Get Day
console.log(now.getDay());

const year = now.getFullYear(); // return year
const month = now.getMonth() + 1; // return month(0 - 11)
const date = now.getDate(); // return date (1 - 31)
const hours = now.getHours(); // return nu darn number (0 -59)
const minutes = now.getMinutes();

console.log(`${date}/${month}/${year} ${hours}:${minutes}`); // 4/1/2020 0:56

//DAY THREE
//TOPICS: Conditionals

//Conditional statements are used for make decisions based on different conditions.
// By default , statements in JavaScript script executed sequentially from top to bottom.
//Conditional execution: a block of one or more statements will be executed if a certain expression is true
//Repetitive execution: a block of one or more statements will be repetitively executed as long as a certain expression is true.
//In this section, we will cover if, else , else if statements.

/*

Conditions can be implementing using the following ways:

if
if else
if else if else
switch
ternary operator


If
In JavaScript and other programming languages the key word if is to used check if a condition is true
 and to execute the block code. To create an if condition, we need if keyword, 
 condition inside a parenthesis and block of code inside a curly bracket({}).
*/

/*

syntax
if (condition) {
  //this part of code runs for truthy condition
}

*/

let num = 3;
if (num > 0) {
  console.log(`${num} is a positive number.`);
}

let iAmHungry = true;

if (iAmHungry) {
  console.log("Get me food.");
}

//If Else
// condition is true the first block will be executed, if not the else condition will be executed.

/*
// syntax
if (condition) {
  // this part of code runs for truthy condition
} else {
  // this part of code runs for false condition
}

*/
let num1 = 5;
if (num1 > 0) {
  console.log(`${num1} is a positive number.`);
} else {
  console.log(`${num1} is a negative number.`);
}

num1 = -3;
if (num1 > 0) {
  console.log(`${num1} is a positive number`);
} else {
  console.log(`${num1} is a negative number`);
}
//  -3 is a negative number

//If Else if Else
//programming is also full of conditions. We use else if when we have multiple conditions.

/* // syntax
if (condition) {
     // code
} else if (condition) {
   // code
} else {
    //  code

}
*/

let aa = 0;
if (aa > 0) {
  console.log(`${aa} is a positive number`);
} else if (aa < 0) {
  console.log(`${aa} is a negative number`);
} else if (a == 0) {
  console.log(`${aa} is zero`);
} else {
  console.log(`${aa} is not a number`);
}

let weatherCondition = "Sunny";

if (weatherCondition == "Rainy") {
  console.log("You need an umbrella");
} else if (weatherCondition == "Cloudy") {
  console.log("It might be cold, you need a jacket");
} else if (weatherCondition == "Sunny") {
  console.log("Go out freely");
} else {
  console.log("No need for rain coat.");
}

/*
Switch
Switch is an alternative for if else if else else.
 The switch statement starts with a switch keyword followed by a parenthesis and code block. 
 Inside the code block we will have different cases.
  Case block runs if the value in the switch statement parenthesis matches with the case value. 
  The break statement is to terminate execution so the code execution does not go down after
   the condition is satisfied. 
  The default block runs if all the cases don't satisfy the condition.

switch(caseValue){
  case 1:
    // code
    break
  case 2:
   // code
   break
  case 3:
   // code
   break
  default:
   // code
}

*/

let weather = "cloudy";
switch (weather) {
  case "Rainy":
    console.log("You need an umbrella");
    break;
  case "Sunny":
    console.log("Go out freely");
    break;
  case "Cloudy":
    console.log("It might be cold, you need a jacket");
    break;
  default:
    console.log(" No need for rain coat.");
}
let dayUserInput = prompt("What day is today?");
if (dayUserInput) {
  // If the user entered a value, convert it to lowercase
  let day = dayUserInput.toLowerCase();

  switch (day) {
    case "monday":
      console.log("Today is Monday");
      break;
    case "tuesday":
      console.log("Today is Tuesday");
      break;
    case "wednesday":
      console.log("Today is Wednesday");
      break;
    case "thursday":
      console.log("Today is Thursday");
      break;
    case "friday":
      console.log("Today is Friday");
      break;
    case "saturday":
      console.log("Today is Saturday");
      break;
    case "sunday":
      console.log("Today is Sunday");
      break;
    default:
      console.log("Not a valid weekday");
  }
} else {
  console.log("Input was null or empty");
}

let num2 = prompt("Enter number");
switch (true) {
  case num2 > 0:
    console.log("Number is positive");
    break;
  case num2 == 0:
    console.log("Numbers is zero");
    break;
  case num2 < 0:
    console.log("Number is negative");
    break;
  default:
    console.log("Entered value was not a number");
}

//Ternary Operators
//Another way to write conditionals is using ternary operators.
let isNotRaining = true;
isNotRaining
  ? console.log("No need for a rain coat.")
  : console.log("you need for a rain coat.");

//Exercise

/*

Get user input using prompt(“Enter your age:”). If user is 18 or older , give feedback:'You are old enough to drive' but if not 18 give another feedback stating to wait for the number of years he needs to turn 18.

Enter your age: 30
You are old enough to drive.

Enter your age:15
You are left with 3 years to drive.
*/

let age2 = prompt("Enter your age");
if (age2 >= 18) {
  console.log("You are old enough to drive.");
} else {
  let yearsLeft = 18 - age2;
  console.log(`You are left with ${yearsLeft} to .`);
}

//Exercise 2

/* Compare the values of myAge and yourAge using if … else. Based on the comparison and log the result to console stating who is older (me or you). Use prompt(“Enter your age:”) to get the age as input.

Enter your age: 30
You are 5 years older than me.

*/

let myAge = 18;
let yourAge = prompt("Enter Your Age");

if (yourAge > myAge) {
  let newAge = yourAge - myAge;
  console.log(`You are ${newAge} years older than me`);
} else if (yourAge < myAge) {
  let newAge = myAge - yourAge;

  console.log(`I am ${newAge} years older than you`);
} else {
  console.log("We are the same age.");
}

/* If a is greater than b return 'a is greater than b' else 'a is less than b'. Try to implement it in to ways

using if else
ternary operator.
  let a = 4
  let b = 3
  4 is greater than 3

  */
let ac = 4;
let bc = 3;

if (ac > bc) {
  console.log(`${ac} is greater than ${bc}`);
} else {
  console.log(`${ac} is less than ${bc}`);
}

ac > bc
  ? console.log(`${ac} is greater than ${bc}`)
  : console.log(`${ac} is less than ${bc}`);

/* Even numbers are divisible by 2 and the remainder is zero. How do you check, 
if a number is even or not using JavaScript?

Enter a number: 2
2 is an even number

Enter a number: 9
9 is is an odd number.

*/

let num3 = prompt("Enter Number");

let numResult = Number(num3);
if (numResult % 2 === 0) {
  console.log(`${numResult} is an even number.`);
} else {
  console.log(`${numResult} is an odd number.`);
}

/* 
Write a code which can give grades to students according to theirs scores:
80-100, A
70-89, B
60-69, C
50-59, D
0-49, F

*/

let scoreInput = prompt("Enter score");

let score = Number(scoreInput);

if (score >= 80 && score <= 100) {
  console.log("Grade: A");
} else if (score >= 70 && score < 80) {
  console.log("Grade: B");
} else if (score >= 60 && score < 70) {
  console.log("Grade: C");
} else if (score >= 50 && score < 60) {
  console.log("Grade: D");
} else if (score >= 0 && score < 50) {
  console.log("Grade: F");
} else {
  console.log("Invalid score. Please enter a score between 0 and 100.");
}

/* Check if the season is Autumn, Winter, Spring or Summer. If the user input is :
September, October or November, the season is Autumn.
December, January or February, the season is Winter.
March, April or May, the season is Spring
June, July or August, the season is Summer
*/
let month1 = prompt("Enter Month");

let newMonth = month1.toLowerCase();

if (
  newMonth === "september" ||
  newMonth === "october" ||
  newMonth === "november"
) {
  console.log("The season is Autumn");
} else if (
  newMonth === "december" ||
  newMonth === "january" ||
  newMonth === "february"
) {
  console.log("The season is Winter");
} else if (newMonth === "march" || newMonth === "april" || newMonth === "may") {
  console.log("The season is Spring");
} else if (
  newMonth === "june" ||
  newMonth === "july" ||
  newMonth === "august"
) {
  console.log("The season is Summer");
} else {
  console.log("Invalid Month");
}

/* Check if a day is weekend day or a working day. Your script will take day as an input.
    What is the day  today? Saturday
    Saturday is a weekend.

    What is the day today? saturDaY
    Saturday is a weekend.

    What is the day today? Friday
    Friday is a working day.

    What is the day today? FrIDAy
    Friday is a working day.

    */

let day = prompt("Enter the day of the week");

if (day === "Saturday" || day === "Sunday") {
  console.log(`${day} is a weekend.`);
} else {
  console.log(`${day} is a working day.`);
}

//DAY FIVE
//TOPIC: ARRAYS

/* In contrast to variables, an array can store multiple values.
 Each value in an array has an index, and each index has a reference in a memory address.
 Each value can be accessed by using their indexes. 
The index of an array starts from zero, 
and the index of the last element is less by one from the length of the array.
An array is a collection of different data types which are ordered and changeable(modifiable).
 An array allows storing duplicate elements and different data types. 
An array can be empty, or it may have different data type values.


How to create an empty array
In JavaScript, we can create an array in different ways. 
Let us see different ways to create an array. 
It is very common to use const instead of let to declare an array variable.
 If you ar using const it means you do not use that variable name again.
*/

//1. Using Array constructor
// syntax
const arr = Array();
// or
// let arr = new Array()
console.log(arr); // []

//2. Using square brackets([])
// syntax
// This the most recommended way to create an empty list
const arr2 = [];
console.log(arr2);

//HOW TO CREATE ARRAYS

const numbers = [0, 3.14, 9.81, 37, 98.6, 100]; // array of numbers

const vegetables = ["Tomato", "Potato", "Cabbage", "Onion", "Carrot"]; // array of strings, vegetables
const animalProducts = ["milk", "meat", "butter", "yoghurt"]; // array of strings, products
const webTechs = ["HTML", "CSS", "JS", "React", "Redux", "Node", "MongDB"]; // array of web technologies

// Print the array and its length

console.log("Numbers:", numbers);
console.log("Number of numbers:", numbers.length);

console.log("Vegetables:", vegetables);
console.log("Number of vegetables:", vegetables.length);

console.log("Animal products:", animalProducts);
console.log("Number of animal products:", animalProducts.length);

console.log("Web technologies:", webTechs);
console.log("Number of web technologies:", webTechs.length);

//Array can have items of different data types
const arr3 = [
  "Asabeneh",
  250,
  true,
  { country: "Finland", city: "Helsinki" },
  { skills: ["HTML", "CSS", "JS", "React", "Python"] },
]; // arr containing different data types
console.log(arr3);

let jScript = "JavaScript";
const charsInJavaScript = jScript.split("");

console.log(charsInJavaScript); // ["J", "a", "v", "a", "S", "c", "r", "i", "p", "t"]

let companiesString = "Facebook, Google, Microsoft, Apple, IBM, Oracle, Amazon";
let companies = companiesString.split(" , ");

console.log(companies);

let txt =
  "I love teaching and empowering people. I teach HTML, CSS, JS, React, Python.";
let words = txt.split("  ");

//Accessing array items using index
//We access each element in an array using their index. An array index starts from 0.

const fruits2 = ["banana", "orange", "mango", "lemon"];
let firstFruit = fruits2[0]; // we are accessing the first item using its index

console.log(firstFruit); // banana

secondFruit = fruits2[1];
console.log(secondFruit); // orange

let lastFruit = fruits2[3];
console.log(lastFruit); // lemon
// Last index can be calculated as follows

let lastIndex2 = fruits2.length - 1;
lastFruit = fruits[lastIndex];

console.log(lastFruit); // lemon

const numbers3 = [0, 3.14, 9.81, 37, 98.6, 100]; // set of numbers

console.log(numbers3.length); // => to know the size of the array, which is 6
console.log(numbers3); // -> [0, 3.14, 9.81, 37, 98.6, 100]
console.log(numbers3[0]); //  -> 0
console.log(numbers3[5]); //  -> 100

let lastIndex3 = numbers3.length - 1;
console.log(numbers3[lastIndex]); // -> 100

const webTechs1 = [
  "HTML",
  "CSS",
  "JavaScript",
  "React",
  "Redux",
  "Node",
  "MongoDB",
]; // List of web technologies

console.log(webTechs1); // all the array items
console.log(webTechs1.length); // => to know the size of the array, which is 7
console.log(webTechs1[0]); //  -> HTML
console.log(webTechs1[6]); //  -> MongoDB

let lastIndex4 = webTechs1.length - 1;
console.log(webTechs1[lastIndex4]); // -> MongoDB

const shoppingCart = [
  "Milk",
  "Mango",
  "Tomato",
  "Potato",
  "Avocado",
  "Meat",
  "Eggs",
  "Sugar",
]; // List of food products

console.log(shoppingCart); // -> all shoppingCart in array
console.log(shoppingCart[0]); //  -> Milk
console.log(shoppingCart[7]); //  -> Sugar

let lastIndex5 = shoppingCart.length - 1;
console.log(shoppingCart[lastIndex5]); //  -> Sugar

//Modifying array element
//An array is mutable(modifiable). Once an array is created, we can modify the contents of the array elements.

const numbers1 = [1, 2, 3, 4, 5];
numbers1[0] = 10;
numbers1[3] = 20;
console.log(numbers1);

const countries2 = [
  "Albania",
  "Bolivia",
  "Canada",
  "Denmark",
  "Ethiopia",
  "Finland",
  "Germany",
  "Hungary",
  "Ireland",
  "Japan",
  "Kenya",
];

countries2[2] = "Nigeria";
let lastOfIndex = countries2.length - 1;
console.log(lastOfIndex);
countries2[lastOfIndex] = "Korea";
console.log(countries2);

//Methods to manipulate array
//There are different methods to manipulate an array.
//These are some of the available methods to deal with arrays:Array,
//length, concat, indexOf, slice, splice, join, toString, includes,
//lastIndexOf, isArray, fill, push, pop, shift, unshift

const arr1 = Array(); // creates an an empty array
console.log(arr1);

const eightEmptyValues = Array(8);
console.log(eightEmptyValues); // [empty x 8]

//Creating static values with fill
//fill: Fill all the array elements with a static value

const eightXvalues = Array(8).fill("X"); // it creates eight element values filled with 'X'
console.log(eightXvalues); // ['X', 'X','X','X','X','X','X','X']

const eight0values = Array(8).fill(0);
console.log(eight0values);

const four4values = Array(4).fill(4);
console.log(four4values);

//Concatenating array using concat
//concat:To concatenate two arrays.

const firstList = [1, 2, 3];
const secondList = [4, 5, 6];
const thirdList = firstList.concat(secondList);

console.log(thirdList);

const fruits1 = ["banana", "orange", "mango", "lemon"]; // array of fruits
const vegetables1 = ["Tomato", "Potato", "Cabbage", "Onion", "Carrot"]; // array of vegetables
const fruitsAndVegetables = fruits1.concat(vegetables1);

console.log(fruitsAndVegetables);

//Getting array length
//Length:To know the size of the array

console.log(fruitsAndVegetables.length);

//Getting index an element in arr array
//indexOf:To check if an item exist in an array.
//If it exists it returns the index else it returns -1.

const numbers4 = [1, 2, 3, 4, 5];

console.log(numbers4.indexOf(2));
console.log(numbers4.indexOf(5)); // -> 4
console.log(numbers4.indexOf(0)); // -> -1
console.log(numbers4.indexOf(1)); // -> 0
console.log(numbers4.indexOf(6)); // -> -1

//Check an element if it exist in an array.

//Check items in a list

const fruits3 = ["banana", "orange", "mango", "lemon"];
let index = fruits3.indexOf("banana"); // 0

if (index === -1) {
  console.log("Fruit does not exist in the array");
} else {
  console.log("This fruit does exist in the array");
}

index === -1
  ? console.log("Fruit does not exist in the array")
  : console.log("This fruit does exist in the array");

let indexOfAvocado = fruits3.indexOf("avocado");

if (index === -1) {
  console.log("Fruit does not exist in the array");
} else {
  console.log("This fruit does exist in the array");
}

//Getting last index of an element in array
//lastIndexOf: It gives the position of the last item in the array.
//If it exist, it returns the index else it returns -1.

const numbers5 = [1, 2, 3, 4, 5, 3, 1, 2];

console.log(numbers5.lastIndexOf(2)); // 7
console.log(numbers5.lastIndexOf(0)); // -1
console.log(numbers5.lastIndexOf(1)); //  6
console.log(numbers5.lastIndexOf(4)); //  3
console.log(numbers5.lastIndexOf(6)); // -1

//includes:To check if an item exist in an array. If it exist it returns the true else it returns false.

console.log(numbers5.includes(5));
console.log(numbers5.includes(6));
console.log(numbers5.includes(3));

const webTechs3 = [
  "HTML",
  "CSS",
  "JavaScript",
  "React",
  "Redux",
  "Node",
  "MongoDB",
]; // List of web technologies

console.log(webTechs3.includes("Node")); // true
console.log(webTechs3.includes("C")); // false

//Checking array
//Array.isArray:To check if the data type is an array

const numbers6 = [1, 2, 3, 4, 5];
console.log(Array.isArray(numbers)); // true

const number1 = 100;
console.log(Array.isArray(number1)); // false

//Converting array to string
//toString:Converts array to string

const numb = [1, 2, 3, 4, 5];
console.log(numb.toString());

const names = ["Asabeneh", "Mathias", "Elias", "Brook"];
console.log(names.toString()); // Asabeneh,Mathias,Elias,Brook

//Joining array elements
//join: It is used to join the elements of the array,
//the argument we passed in the join method will be joined in the array and return as a string.
//By default, it joins with a comma, but we can pass different string parameter which can be joined between the items.

const numbers7 = [1, 2, 3, 4, 5];
console.log(numbers7.join()); // 1,2,3,4,5

const names2 = ["Asabeneh", "Mathias", "Elias", "Brook"];

console.log(names2.join()); // Asabeneh,Mathias,Elias,Brook
console.log(names2.join("")); //AsabenehMathiasEliasBrook
console.log(names2.join(" ")); //Asabeneh Mathias Elias Brook
console.log(names2.join(", ")); //Asabeneh, Mathias, Elias, Brook
console.log(names2.join(" # ")); //Asabeneh # Mathias # Elias # Brook

const webTechs4 = [
  "HTML",
  "CSS",
  "JavaScript",
  "React",
  "Redux",
  "Node",
  "MongoDB",
]; // List of web technologies

console.log(webTechs4.join()); // "HTML,CSS,JavaScript,React,Redux,Node,MongoDB"
console.log(webTechs4.join(" # ")); // "HTML # CSS # JavaScript # React # Redux # Node # MongoDB"

//Splice method in array
//Splice: It takes three parameters:Starting position, number of times to be removed and number of items to be added.

const numbers8 = [1, 2, 3, 4, 5];
numbers8.splice();
console.log(numbers8); // -> remove all items

const numbers9 = [1, 2, 3, 4, 5];
numbers9.splice(0, 1);
console.log(numbers9); // remove the first item

const numbers10 = [1, 2, 3, 4, 5, 6];
numbers10.splice(3, 3, 7, 8, 9);
console.log(numbers10.splice(3, 3, 7, 8, 9)); // -> [1, 2, 3, 7, 8, 9] //it removes three item and replace three items

//Adding item to an array using push
//Push: adding item in the end. To add item to the end of an existing array we use the push method.

const numbers11 = [1, 2, 3, 4, 5];
numbers11.push(6);
console.log(numbers11); // -> [1,2,3,4,5,6]

numbers11.pop(); // -> remove one item from the end
console.log(numbers11); // -> [1,2,3,4,5]

let fruits4 = ["banana", "orange", "mango", "lemon"];
fruits4.push("apple");
console.log(fruits4); // ['banana', 'orange', 'mango', 'lemon', 'apple']

fruits4.push("lime");
console.log(fruits4); // ['banana', 'orange', 'mango', 'lemon', 'apple', 'lime']

//Removing the end element using pop
//pop: Removing item in the end.

const numbers12 = [1, 2, 3, 4, 5];
numbers12.pop(); // -> remove one item from the end
console.log(numbers12); // -> [1,2,3,4]

//Removing an element from the beginning
//shift: Removing one array element in the beginning of the array.

const numbers13 = [1, 2, 3, 4, 5];
numbers13.shift(); // -> remove one item from the beginning
console.log(numbers13); // -> [2,3,4,5]

//Add an element from the beginning
//unshift: Adding array element in the beginning of the array.

const numbers14 = [1, 2, 3, 4, 5];
numbers14.unshift(0); // -> add one item from the beginning
console.log(numbers14); // -> [0,1,2,3,4,5]

//Reversing array order
//reverse: reverse the order of an array.

const numbers15 = [1, 2, 3, 4, 5];
numbers15.reverse(); // -> reverse array order
console.log(numbers15); // [5, 4, 3, 2, 1]

numbers15.reverse();
console.log(numbers15); // [1, 2, 3, 4, 5]

//Sorting elements in array
//sort: arrange array elements in ascending order. Sort takes a call back function,
//we will see how we use sort with a call back function in the coming sections.

const webTechs5 = [
  "HTML",
  "CSS",
  "JavaScript",
  "React",
  "Redux",
  "Node",
  "MongoDB",
];

webTechs5.sort();
console.log(webTechs5); // ["CSS", "HTML", "JavaScript", "MongoDB", "Node", "React", "Redux"]

webTechs5.reverse(); // after sorting we can reverse it
console.log(webTechs5); // ["Redux", "React", "Node", "MongoDB", "JavaScript", "HTML", "CSS"]

//Array of arrays
//Array can store different data types including an array itself. Let us create an array of arrays.

const firstNums = [1, 2, 3];
const secondNums = [1, 4, 9];

const arrayOfArray = [
  [1, 2, 3],
  [1, 2, 3],
];
console.log(arrayOfArray[0]); // [1, 2, 3]

const frontEnd = ["HTML", "CSS", "JS", "React", "Redux"];
const backEnd = ["Node", "Express", "MongoDB"];
const fullStack = [frontEnd, backEnd];
console.log(fullStack); // [["HTML", "CSS", "JS", "React", "Redux"], ["Node", "Express", "MongoDB"]]
console.log(fullStack.length); // 2
console.log(fullStack[0]); // ["HTML", "CSS", "JS", "React", "Redux"]
console.log(fullStack[1]); // ["Node", "Express", "MongoDB"]

//EXERCISES
const countries5 = [
  "Albania",
  "Bolivia",
  "Canada",
  "Denmark",
  "Ethiopia",
  "Finland",
  "Germany",
  "Hungary",
  "Ireland",
  "Japan",
  "Kenya",
];

const webTechs6 = [
  "HTML",
  "CSS",
  "JavaScript",
  "React",
  "Redux",
  "Node",
  "MongoDB",
];

//Declare an empty array;

let arr4 = Array();

//Declare an array with more than 5 number of elements
// Declare an array with more than 5 elements
const figures = [10, 20, 30, 40, 50, 60, 70, 80];

// Log the array to the console
console.log(figures);

//Find the length of your array
let arrayLength = figures.length;

//Get the first item, the middle item and the last item of the array
console.log(figures[0]);
console.log(figures[4]);
console.log(figures.length - 1);

//DAY SIX
//TOPIC: LOOPS

//A loop in JavaScript is a way to tell the computer to do something over and over again until you tell it to stop.

/* for Loop:
Imagine you want to count from 1 to 10. A for loop helps you do this easily.
You tell the computer three things:
Where to start (let i = 1;).
When to stop (i <= 10;).
How to count (i++ which means "add 1 each time").

*/

for (let i = 0; i <= 5; i++) {
  console.log(i);
}

for (let i = 5; i >= 0; i--) {
  console.log(i);
}

// 5 4 3 2 1 0

for (let i = 0; i <= 5; i++) {
  console.log(`${i} * ${i} = ${i * i}`);
}

const numbers16 = [1, 2, 3, 4, 5];
let sum1 = 0;
for (let i = 0; i < numbers.length; i++) {
  sum1 = sum1 + numbers[i]; // can be shorten, sum += numbers[i]
}

console.log(sum1); // 15

const countries7 = ["Finland", "Sweden", "Norway", "Denmark", "Iceland"];
const newArr = [];
for (let i = 0; i < countries7.length; i++) {
  newArr.push(countries7[i].toUpperCase());
}

console.log(newArr); // ["FINLAND", "SWEDEN", "NORWAY", "DENMARK", "ICELAND"]

//while Loop:
//This loop repeats an action as long as a certain condition is true.
var i = 0;
while (i < 10) {
  console.log(i);
  i++;
}

//do...while Loop:
//This loop is similar to the while loop, but it always runs at least once, even if the condition is false at the start.

var i = 0;
do {
  console.log(i);
  i++;
} while (i <= 10);

//For of loop
//We use for of loop for arrays.
//It is very hand way to iterate through an array if we are not interested in the index of each element in the array.

const numbers17 = [1, 2, 3, 4, 5];

for (const num of numbers17) {
  console.log(num);
}

for (const num of numbers17) {
  console.log(num * num);
}

const webTechs7 = [
  "HTML",
  "CSS",
  "JavaScript",
  "React",
  "Redux",
  "Node",
  "MongoDB",
];

for (const tech of webTechs7) {
  console.log(tech.toUpperCase());
}

const countries8 = ["Finland", "Sweden", "Norway", "Denmark", "Iceland"];
const newAr1 = [];

for (const country of countries8) {
  newAr1.push(country.toUpperCase());
}

//break
//Break is used to interrupt a loop.
for (i = 0; i < 10; i++) {
  if (i == 3) {
    break;
  }
  console.log(i);
}

//continue
//We use the keyword continue to skip a certain iterations.
for (let i = 0; i <= 5; i++) {
  if (i == 3) {
    continue;
  }
  console.log(i);
}

//Exercise
/* 
Write a loop that makes the following pattern using console.log():

    #
    ##
    ###
    ####
    #####
    ######
    #######

    */

const numberOfRows = 7;

for (let i = 1; i <= numberOfRows; i++) {
  let pattern = "#".repeat(i);
  console.log(pattern);
}

/* 
Use loop to print the following pattern:

0 x 0 = 0
1 x 1 = 1
2 x 2 = 4
3 x 3 = 9
4 x 4 = 16
5 x 5 = 25
6 x 6 = 36
7 x 7 = 49
8 x 8 = 64
9 x 9 = 81
10 x 10 = 100

*/

for (let i = 0; i <= 10; i++) {
  console.log(`${i} * ${i} = ${i * i}`);
}

/* 
Using loop print the following pattern

 i    i^2   i^3
 0    0     0
 1    1     1
 2    4     8
 3    9     27
 4    16    64
 5    25    125
 6    36    216
 7    49    343
 8    64    512
 9    81    729
 10   100   1000

 */

for (let i = 0; i <= 10; i++) {
  const iSquared = i * i;
  const iCubed = i * i * i;

  console.log(`${i}  ${iSquared} ${iCubed}`);
}

//DAY SIX
//TOPIC: FUNCTIONS

/*

A function is a reusable block of code or programming statements designed to perform a certain task.
 A function is declared by a function key word followed by a name, followed by parentheses (). 
 A parentheses can take a parameter.
  If a function take a parameter it will be called with argument. 
  A function can also take a default parameter.
   To store a data to a function, a function has to return certain data types. 
   Declare a function
To declare a function, you use the function keyword, followed by the function name, 
a list of parameters, and the function body as follows:
Calling a function
To use a function, you need to call it. Calling a function is also known as invoking a function.
 To call a function, you use its name followed by arguments enclosing in parentheses like this.
 When calling a function, JavaScript executes the code inside the function body. 
 Returning a value
Every function in JavaScript implicitly returns undefined unless you explicitly specify a return value.
   To get the value we call or invoke a function. Function makes code:

clean and easy to read
reusable
easy to test

A function can be declared or created in couple of ways:

Declaration function
Expression function
Anonymous function
Arrow function

*/

//Function without a parameter and return
//Function can be declared without a parameter.

function square() {
  let num = 2;
  let sq = num * num;
  console.log(sq);
}

square();

function addTwoNumbers() {
  let numOne = 10;
  let numTwo = 20;
  let sum = numOne + numTwo;

  console.log(sum);
}

addTwoNumbers();

function printFullName() {
  let firstName = "Asabeneh";
  let lastName = "Yetayeh";
  let space = " ";
  let fullName = firstName + space + lastName;
  console.log(fullName);
}

printFullName(); // calling a function

//Function returning value
//Function can also return values, if a function does not return values the value of the function is undefined.

function printFullName() {
  let firstName = "Asabeneh";
  let lastName = "Yetayeh";
  let space = " ";
  let fullName = firstName + space + lastName;
  return fullName;
}

printFullName(); // calling a function

function addTwoNumbers() {
  let numOne = 2;
  let numTwo = 3;
  let total = numOne + numTwo;
  return total;
}

console.log(addTwoNumbers());

//Function with a parameter
//In a function we can pass different data types(number, string, boolean, object, function) as a parameter.

function square(num) {
  return num * num;
}

console.log(square(10));

//Function with two parameters

function sumTwoNumbers(numOne, numTwo) {
  let sum = numOne + numTwo;
  console.log(sum);
}
sumTwoNumbers(10, 20); // calling functions
// If a function doesn't return it doesn't store data, so it should return

function printFullName(firstName, LastName) {
  return `${firstName} ${lastName}`;
}

console.log(printFullName("Asabeneh", "Yetayeh"));

//Function with unlimited number of parameters
//Sometimes we do not know how many arguments the user going to pass.
//Therefore, we should know how to write a function which can take unlimited number of arguments.
// Let us access the arguments object

function sumAllNums() {
  console.log(arguments);
}

sumAllNums(1, 2, 3, 4);
// Arguments(4) [1, 2, 3, 4, callee: ƒ, Symbol(Symbol.iterator): ƒ]

function sumAllNums() {
  let sum = 0;
  for (let i = 0; i < arguments.length; i++) {
    sum += arguments[i];
  }
  return sum;
}

console.log(sumAllNums(1, 2, 3, 4)); // 10
console.log(sumAllNums(10, 20, 13, 40, 10)); // 93
console.log(sumAllNums(15, 20, 30, 25, 10, 33, 40)); // 173

// function declaration
const sumAllNums1 = (...args) => {
  let sum = 0;
  for (const element of args) {
    sum += element;
  }
  return sum;
};

console.log(sumAllNums1(1, 2, 3, 4)); // 10
console.log(sumAllNums1(10, 20, 13, 40, 10)); // 93
console.log(sumAllNums1(15, 20, 30, 25, 10, 33, 40)); // 173

//Anonymous function
//An anonymous function is not accessible after its initial creation.
// Therefore, you often need to assign it to a variable.
const anonymousFun = function () {
  console.log(
    "I am an anonymous function and my value is stored in anonymousFun"
  );
};

//Expression Function
//Expression functions are anonymous functions.
//After we create a function without a name and we assign it to a variable.
//To return a value from the function we should call the variable.

const square1 = function (n) {
  return n * n;
};

console.log(square1(2));

//Self Invoking Functions
//Self invoking functions are anonymous functions which do not need to be called to return a value.
(function (n) {
  console.log(n * n);
})(10);

let squaredNum = (function (n) {
  return n * n;
})(2);
console.log(squaredNum);

//Arrow Function
//Arrow function is an alternative to write a function.
//Arrow function uses arrow instead of the keyword function to declare a function.

let sentence = () => {
  console.log("She is a girl");
};
sentence();

let sqaureNum = (n) => {
  return n * n;
};

console.log(sqaureNum(6));

const changeToUpperCase = (arr) => {
  const newArr = [];
  for (const element of arr) {
    newArr.push(element.toUpperCase());
  }
  return newArr;
};

const countries1 = ["Finland", "Sweden", "Norway", "Denmark", "Iceland"];
console.log(changeToUpperCase(countries1));

const printFullName1 = (firstName, lastName) => {
  return `${firstName} ${lastName}`;
};

console.log(printFullName1("Promise", "Nwankwo"));

const printFullName3 = (firstName, lastName) => `${firstName} ${lastName}`;
console.log(printFullName1("Promise", "Nwankwo"));

//Function with default parameters
//Sometimes we pass default values to parameters, when we invoke the function
//if we do not pass an argument the default value will be used.

function greetings(name = "Peter") {
  let message = `${name}, welcome to 30 Days Of JavaScript!`;
  return message;
}

console.log(greetings());
console.log(greetings("Asabeneh"));

function generateFullName(firstName = "Asabeneh", lastName = "Yetayeh") {
  let space = " ";
  let fullName = firstName + space + lastName;
  return fullName;
}

console.log(generateFullName());
console.log(generateFullName("David", "Smith"));

const greeting = (name = "Peter") => {
  let message = name + ", welcome to 30 Days Of JavaScript!";
  return message;
};

console.log(greeting());
console.log(greeting("Asabeneh"));

//Function hoisting
//In JavaScript, you can use a function before declaring it. For example:
showMe(); // a hoisting example

function showMe() {
  console.log("an hoisting example");
}

//This feature is called hoisting.

//Function hoisting is a mechanism which the JavaScript engine physically moves
// function declarations to the top of the code before executing them.

//Introduction to the JavaScript recursive functions
//A recursive function is a function that calls itself until it doesn’t.
//This technique is called recursion.
function recurse() {
  if (condition) {
    // stop calling itself
    //...
  } else {
    recurse();
  }
}

//Exercises: Level 1
//Declare a function fullName and it print out your full name.
//Declare a function fullName and now it takes firstName, lastName as a parameter and it returns your full - name.

function getFullName(firstName, lastName) {
  return `My name is ${firstName} ${lastName}`;
}

console.log(getFullName("Promise", "Nwankwo"));

//DAY SEVEN
//TOPIC: SCOPE AND OBJECT

//Variables scopes can be:

//Global
//Local
//Variable can be declared globally or locally scope.

//scope.js
a = "JavaScript"; // declaring a variable without let or const make it available in window object and this found anywhere
b = 10; // this is a global scope variable and found in the window object
function letsLearnScope() {
  console.log(a, b);
  if (true) {
    console.log(a, b);
  }
}
console.log(a, b); // accessible

//Local scope
//A variable declared as local can be accessed only in certain block code.

//Block Scope
//Function Scope

//scope.js
let A = "JavaScript"; // is a global scope it will be found anywhere in this file
let B = 10; // is a global scope it will be found anywhere in this file
// Function scope
function letsLearnScope() {
  console.log(A, B); // JavaScript 10, accessible
  let value = false;
  // block scope
  if (true) {
    // we can access from the function and outside the function but
    // variables declared inside the if will not be accessed outside the if block
    let A = "Python";
    let B = 20;
    let c = 30;
    let d = 40;
    value = !value;
    console.log(A, B, c, value); // Python 20 30 true
  }
  // we can not access c because c's scope is only the if block
  console.log(A, B, value); // JavaScript 10 true
}
letsLearnScope();
console.log(A, B); // JavaScript 10, accessible

function exampleFunction() {
  var functionScopedVar = "I am available throughout the function";

  if (true) {
    let blockScopedLet = "I am only available in this block";
    const blockScopedConst = "I am only available in this block";
    console.log(functionScopedVar); // This works
    console.log(blockScopedLet); // This works
    console.log(blockScopedConst); // This works
  }

  console.log(functionScopedVar); // This works
  // The following lines would cause errors because `blockScopedLet` and `blockScopedConst` are not available outside the block:
  // console.log(blockScopedLet);
  // console.log(blockScopedConst);
}

//Object
//Everything can be an object and objects do have properties and properties have values,
//so an object is a key value pair.
//Creating an empty object
//An empty object
//Introduction to the JavaScript object methods
//An object is a collection of key/value pairs or properties.
//When the value is a function, the property becomes a method.
//Typically, you use methods to describe the object’s behaviors.
let person5 = {
  firstName: "John",
  lastName: "Doe",
};

person5.greet = function () {
  console.log("Hello");
};

person5.greet();
const person = {};

//Creating an objecting with values
const rectangle = {
  length: 20,
  width: 20,
};
console.log(rectangle); // {length: 20, width: 20}

const person1 = {
  firstName: "Asabeneh",
  lastName: "Yetayeh",
  age: 250,
  country: "Finland",
  city: "Helsinki",
  skills: [
    "HTML",
    "CSS",
    "JavaScript",
    "React",
    "Node",
    "MongoDB",
    "Python",
    "D3.js",
  ],
  isMarried: true,
};
console.log(person1);

//Getting values from an object
//We can access values of object using two methods:

//using . followed by key name if the key-name is a one word
//using square bracket and a quote

const person2 = {
  firstName: "Asabeneh",
  lastName: "Yetayeh",
  age: 250,
  country: "Finland",
  city: "Helsinki",
  skills: [
    "HTML",
    "CSS",
    "JavaScript",
    "React",
    "Node",
    "MongoDB",
    "Python",
    "D3.js",
  ],
  getFullName: function () {
    return `${this.firstName}${this.lastName}`;
  },
  "phone number": "+3584545454545",
};

// accessing values using .
console.log(person2.firstName);
console.log(person2.lastName);
console.log(person2.age);
console.log(person2.location); // undefined

// value can be accessed using square bracket and key name
console.log(person2["firstName"]);
console.log(person2["lastName"]);
console.log(person2["age"]);
console.log(person2["age"]);
console.log(person2["location"]); // undefined

// for instance to access the phone number we only use the square bracket method
console.log(person2["phone number"]);

//Object Methods
//There are different methods to manipulate an object. Let us see some of the available methods.

//Object.assign: To copy an object without modifying the original object

const person3 = {
  firstName: "Asabeneh",
  age: 250,
  country: "Finland",
  city: "Helsinki",
  skills: ["HTML", "CSS", "JS"],
  title: "teacher",
  address: {
    street: "Heitamienkatu 16",
    pobox: 2002,
    city: "Helsinki",
  },
  getPersonInfo: function () {
    return `I am ${this.firstName} and I live in ${this.city}, ${this.country}. I am ${this.age}.`;
  },
};

//Object methods: Object.assign, Object.keys, Object.values, Object.entries
//hasOwnProperty

const copyPerson = Object.assign({}, person3);
console.log(copyPerson);

//Getting object keys using Object.keys()
//Object.keys: To get the keys or properties of an object as an array
const keys = Object.keys(copyPerson);
console.log(keys); //['firstName', 'age', 'country','city', 'skills','title', 'address', 'getPersonInfo']
const address = Object.keys(copyPerson.address);
console.log(address); //['street', 'pobox', 'city']

//Getting object values using Object.values()
//Object.values:To get values of an object as an array

const values = Object.values(copyPerson);
console.log(values);

//Getting object keys and values using Object.entries()
//Object.entries:To get the keys and values in an array

const entries = Object.entries(copyPerson);
console.log(entries);

/* Exercises: Level 1
Create an empty object called dog
Print the the dog object on the console
Add name, legs, color, age and bark properties for the dog object. The bark property is a method which return woof woof
Get name, legs, color, age and bark value from the dog object
Set new properties the dog object: breed, getDogInfo
*/

let dog = {};
console.log(dog);

// Add properties to the dog object
dog.name = "Buddy";
dog.legs = 4;
dog.color = "brown";
dog.age = 5;

dog.bark = function () {
  return "woof woof";
};

// Print the values of the properties and the result of the bark method
console.log(`Name: ${dog.name}`);
console.log(`Legs: ${dog.legs}`);
console.log(`Color: ${dog.color}`);
console.log(`Age: ${dog.age}`);
console.log(`Bark: ${dog.bark()}`);

// Set new properties for the dog object
dog.breed = "Golden Retriever";
dog.getDogInfo = function () {
  return `The dog's name is ${this.name}, a ${this.age}-year-old ${
    this.color
  } ${this.breed}. It has ${
    this.legs
  } legs. When it barks, it goes ${this.bark()}.`;
};

//DAY 8
//TOPIC COVERED: Higher Order Function
//Higher order functions are functions which take other function as a parameter or return a function as a value.
// The function passed as a parameter is called callback.
// a callback function, the name of the function could be any name
const callback = (n) => {
  return n ** 2;
};

// function that takes other function as a callback
function cube(callback, n) {
  return callback(n) * n;
}

console.log(cube(callback, 3));

//Returning function
//Higher order functions return function as a value​

// Higher order function returning an other function
const higherOrder = (n) => {
  const doSomething = (m) => {
    const doWhatEver = (t) => {
      return 2 * n + 3 * m + t;
    };
    return doWhatEver;
  };
  return doSomething;
};
console.log(higherOrder(2)(3)(10));

/* Setting time
In JavaScript we can execute some activities in a certain interval of time or we can schedule(wait) for some time to execute some activities.

setInterval
setTimeout
Setting Interval using a setInterval function
In JavaScript, we use setInterval higher order function to do some activity continuously with in some interval of time. The setInterval global method take a callback function and a duration as a parameter. 
The duration is in milliseconds and the callback will be always called in that interval of time.

*/
function sayHello() {
  console.log("Hello");
}
setInterval(sayHello, 1000); // it prints hello in every second, 1000ms is 1s

/*Setting a time using a setTimeout
In JavaScript, we use setTimeout higher order function
 to execute some action at some time in the future.
  The setTimeout global method take a callback function and a duration as a parameter. 
The duration is in milliseconds and the callback wait for that amount of time.
*/
function sayHell1o() {
  console.log("Hello");
}
setTimeout(sayHello, 2000); // it prints hello after it waits for 2 seconds.

/*
Functional Programming
Instead of writing regular loop, latest version of JavaScript introduced 
lots of built in methods which can help us to solve complicated problems. 
All builtin methods take callback function. In this section, we will see forEach, 
map, filter, reduce, find, every, some, and sort.

forEach
forEach: Iterate an array elements. We use forEach only with arrays. 
It takes a callback function with elements, index parameter and array itself. 
The index and the array optional.
*/

arr.forEach(function (element, index, arr) {
  console.log(index, element, arr);
});
// The above code can be written using arrow function
arr.forEach((element, index, arr) => {
  console.log(index, element, arr);
});
// The above code can be written using arrow function and explicit return
arr.forEach((element, index, arr) => console.log(index, element, arr));

let sum4 = 0;
const number19 = [1, 2, 3, 4, 5];
number19.forEach((num) => console.log(num));
console.log(sum);

const fruits5 = ["apple", "banana", "cherry"];
fruits.forEach(function (fruit) {
  console.log(fruit);
});

let xWorldCoders = [
  "Faud",
  "Maaz",
  "Malk",
  "Al-Mustapha",
  "Promise",
  "Aminco",
  "Kingsley",
];

xWorldCoders.forEach(function (xWorldCoder) {
  console.log(xWorldCoder + " " + "Good Afternoon");
});

//more example
let sum7 = 0;
const numbers20 = [1, 2, 3, 4, 5];

numbers20.forEach((num) => console.log(num));

//more example
const countries6 = ["Finland", "Denmark", "Sweden", "Norway", "Iceland"];
countries6.forEach((element) => console.log(element.toUpperCase()));

//map
//map: Iterate an array elements and modify the array elements.
// It takes a callback function with elements, index , array parameter and return a new array.

const numbers21 = [1, 2, 3, 4, 5];
let squaredNumber = numbers21.map((num) => num * num);
console.log(squaredNumber);

const names7 = ["Asabeneh", "Mathias", "Elias", "Brook"];
let nameToUpperCase = names7.map((item) => item.toUpperCase());
console.log(nameToUpperCase);

const countries9 = [
  "Albania",
  "Bolivia",
  "Canada",
  "Denmark",
  "Ethiopia",
  "Finland",
  "Germany",
  "Hungary",
  "Ireland",
  "Japan",
  "Kenya",
];

let countryToUpperCase = countries9.map((country) => {
  return country.toUpperCase();
});

console.log(countryToUpperCase);

const countriesFirstThreeLetters = countries9.map((country) =>
  country.toUpperCase().slice(0, 3)
);

//filter
//Filter: Filter out items which full fill filtering conditions and return a new array.
//Filter countries containing land
const countriesContainingLand = countries9.filter((country) =>
  country.includes("land")
);
console.log(countriesContainingLand);

const countriesEndsByia = countries9.filter((country) =>
  country.endsWith("ia")
);
console.log(countriesEndsByia);

const countriesHaveFiveLetters = countries9.filter(
  (country) => country.length === 5
);
console.log(countriesHaveFiveLetters);

const scores = [
  { name: "Asabeneh", score: 95 },
  { name: "Lidiya", score: 98 },
  { name: "Mathias", score: 80 },
  { name: "Elias", score: 50 },
  { name: "Martha", score: 85 },
  { name: "John", score: 100 },
];

let scoresGreaterThanEighty = scores.filter((score) => score.score > 80);
console.log(scoresGreaterThanEighty);

//reduce
//reduce: Reduce takes a callback function.
//The call back function takes accumulator, current,
//and optional initial value as a parameter and returns a single value.
// It is a good practice to define an initial value for the accumulator value.

const words1 = [
  "This",
  "is",
  "an",
  "example",
  "of",
  "using",
  "reduce",
  "with",
  "strings",
];

const sentence1 = words1.reduce(function (accumulator, currentValue) {
  return accumulator + " " + currentValue;
}, " ");

console.log("Sentence:", sentence1);

//find
//find: Return the first element which satisfies the condition.
const ages = [24, 22, 25, 32, 35, 18];
const ageLessThanTwenty = ages.find((age) => age < 20);
console.log(ageLessThanTwenty);

const names5 = ["Asabeneh", "Mathias", "Elias", "Brook"];
const nameLengthSeven = names5.find((name) => name.length > 7);
console.log(nameLengthSeven);

//findIndex
//findIndex: Return the position of the first element which satisfies the condition
const names8 = ["Asabeneh", "Mathias", "Elias", "Brook"];
const ages1 = [24, 22, 25, 32, 35, 18];

const result2 = names8.findIndex((name) => name.length > 7);
console.log(result2); // 0

const ageLess = ages1.findIndex((age) => age < 20);
console.log(ageLess); // 5

//some
//some: Check if some of the elements are similar in one aspect. It returns boolean
const names9 = ["Asabeneh", "Mathias", "Elias", "Brook"];
const bools = [true, true, true, true];

const areSomeTrue = bools.some((b) => b === true);

console.log(areSomeTrue); //true

const areAllStr = names9.some((name) => typeof name === "number"); // Are all strings ?
console.log(areAllStr); // false

/* sort
sort: The sort methods arranges the array elements either ascending or descending order. 
By default, the sort() method sorts values as strings.
This works well for string array items but not for numbers.
If number values are sorted as strings and it give us wrong result.

*/

const products = ["Milk", "Coffee", "Sugar", "Honey", "Apple", "Carrot"];
console.log(products.sort()); // ['Apple', 'Carrot', 'Coffee', 'Honey', 'Milk', 'Sugar']
//Now the original products array  is also sorted

/*
Sorting Numeric values
As you can see in the example below, 100 came first after sorted in ascending order. 
Sort converts items to string , since '100' and other numbers compared,
 1 which the beginning of the string '100' became the smallest. 
 To avoid this, we use a compare call back function inside the sort method, 
 which return a negative, zero or positive.
 */

const numbersSort = [9.81, 3.14, 100, 37];
// Using sort method to sort number items provide a wrong result. see below
console.log(numbersSort.sort()); //[100, 3.14, 37, 9.81]
numbersSort.sort(function (a, b) {
  return a - b;
});

console.log(numbersSort); // [3.14, 9.81, 37, 100]

numbersSort.sort(function (a, b) {
  return b - a;
});
console.log(numbersSort); //[100, 37, 9.81, 3.14]

//DAY 10
//TOPIC COVERED: SET AND MAPS
/*
In JavaScript, a Set is a collection of unique values. 
Set is a collection of elements. Set can only contains unique elements.
 It's a data structure similar to an array, 
 but it doesn't allow duplicate values, and the values are stored in insertion order.
 */

//Creating an empty set
const companies1 = new Set();
console.log(companies1);

const mySet = new Set();
console.log(mySet);

//Creating set from array
const languages = [
  "English",
  "Finnish",
  "English",
  "French",
  "Spanish",
  "English",
  "French",
];

const setOfLanguages = new Set(languages);
console.log(setOfLanguages);

for (const language of setOfLanguages) {
  console.log(language);
}

//Adding an element to a set

companies1.add("Amazon");
companies1.add("Google"); // add element to the set
companies1.add("Facebook");
companies1.add("Amazon");
companies1.add("Oracle");
companies1.add("Microsoft");
console.log(companies1.size); // 5 elements in the set
console.log(companies1);
//We can also use loop to add element to a set.

const companies2 = ["Google", "Facebook", "Amazon", "Oracle", "Microsoft"];
setOfCompanies = new Set();
for (const company of companies2) {
  setOfCompanies.add(company);
}

//Deleting an element a set
//We can delete an element from a set using a delete method.

console.log(companies1.delete("Google"));
console.log(companies1.size); // 4 elements left in the set

//Checking an element in the set
//The has method can help to know if a certain element exists in a set.
console.log(companies1.has("Amazon"));
console.log(companies1.has("Apple")); // false

//A Map in JavaScript is a data structure that allows you to store key-value pairs, similar to an object.
// However, Map provides additional features such as preserving the order of entries
//and allowing keys of any data type (including objects, arrays, and functions).

const map = new Map();

//Adding Key-Value Pairs:
//Use the set() method to add a key-value pair to the Map
map.set("key1", "value1");
map.set("key2", "value2");

//Retrieving Values:
//Use the get() method to retrieve a value based on its key
const value = map.get("key1");
console.log(value); // Output: 'value1'

//Checking for Keys:
//Use the has() method to check if a key exists in the Map.
console.log(map.has("key2"));
console.log(map.has("key3")); // Output: false

//Removing Key-Value Pairs:
//Use the delete() method to remove a key-value pair from the Map:
map.delete("key1");
console.log(map.has("key1")); // Output: false

//Getting the Size:
//Use the size property to get the number of entries in the Map
console.log(map.size); // Output: 1 (after removing 'key1')

//Iterating Over a Map:
//Use a for...of loop to iterate over the key-value pairs in the Map
for (const [key, value] of map) {
  console.log(`${key}: ${value}`);
}

//DAY 11
//TOPIC COVERED: Destructuring, Rest and Spread
//Destructuring is a way to unpack arrays, and objects and assigning to a distinct variable.
//In JavaScript, destructuring is a way to extract values from arrays or
// objects and assign them to variables in a single line.
//const [variable1, variable2, ...rest] = array;

//Example
const colors = ["red", "green", "blue"];

const [color1, color2, color3] = colors;

console.log(color1); // Output: 'red'
console.log(color2); // Output: 'green'
console.log(color3); // Output: 'blue'

//Destructuring Objects:
//const { key1: variable1A, key2: variable2B, ...rest1 } = object;

//Example
const person8 = {
  name: "Alice",
  age: 25,
  country: "USA",
};

const { name16, age16, country16 } = person8;

console.log(name16); // Output: 'Alice'
console.log(age16); // Output: 25
console.log(country16); // Output: 'USA'

const scientificConstants = [2.72, 3.14, 9.81, 37, 100];
let [e, pi, gravity2, bodyTemp1, boilingTemp] = scientificConstants;

console.log(e, pi, gravity2, bodyTemp1, boilingTemp);

const fullStack1 = [
  ["HTML", "CSS", "JS", "React"],
  ["Node", "Express", "MongoDB"],
];

const [frontend, backend] = fullStack1;
console.log(frontEnd);
console.log(backEnd);

//If we like to skip on of the values in the array we use additional comma.
// The comma helps to omit the value at that specific index
const numbers22 = [1, 2, 3];
let [numOne1, , numThree] = numbers22; //2 is omitted

console.log(numOne1, numThree);

const names10 = ["Asabeneh", "Brook", "David", "John"];
let [, secondPerson, , fourthPerson] = names10; // first and third person is omitted

console.log(secondPerson, fourthPerson);

//We can use default value in case the value of array for that index is undefined:

const names11 = [undefined, "Brook", "David"];

let [
  firstName5 = "Asabeneh",
  secondPerson5,
  thirdPerson,
  fourthPerson5 = "John",
] = names11;

//We can not assign variable to all the elements in the array.
//We can destructure few of the first and we can get the remaining as array using spread operator(...).
const nums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
let [num11, num22, num33, ...rest2] = nums1;

console.log(num11, num22, num33);
console.log(rest2);

//Destructuring during iteration
const countries10 = [
  ["Finland", "Helsinki"],
  ["Sweden", "Stockholm"],
  ["Norway", "Oslo"],
];

for (const [country, city] of countries10) {
  console.log(country, city);
}

const fullStack3 = [
  ["HTML", "CSS", "JS", "React"],
  ["Node", "Express", "MongoDB"],
];

for (const [first, second, third] of fullStack3) {
  console.log(first, second, third);
}

//Destructuring objects

const rectangle1 = {
  width: 20,
  height: 10,
  area: 200,
};

let { width, height, area, perimeter } = rectangle1;

console.log(width, height, area, perimeter);

//Renaming during destructuring
let { width: w, height: h, area: ar, perimeter: p } = rectangle1;

console.log(w, h, ar, p);

//If the key is not found in the object the variable will be assigned to undefined.
//Sometimes the key might not be in the object, in that case we can give a default value during declaration.
//See the example
let { width1, height1, area1, perimeter1 = 60 } = rectangle1;
console.log(width1, height1, area1, perimeter1);

//Object parameter without destructuring
// Without destructuring
const rect = {
  width: 20,
  height: 10,
};
const calculatePerimeter = (rectangle) => {
  return 2 * (rectangle.width + rectangle.height);
};

console.log(calculatePerimeter(rect)); // 60
//with destructuring

//Object parameter with destructuring
const calculatePerimeter1 = ({ width, height }) => {
  return 2 * (width + height);
};

console.log(calculatePerimeter1(rect)); // 60

const todoList = [
  {
    task: "Prepare JS Test",
    time: "4/1/2020 8:30",
    completed: true,
  },
  {
    task: "Give JS Test",
    time: "4/1/2020 10:00",
    completed: false,
  },
  {
    task: "Assess Test Result",
    time: "4/1/2020 1:00",
    completed: false,
  },
];

for (const { task, time, completed } of todoList) {
  console.log(task, time, completed);
}

//Spread or Rest Operator

/* Spread Operator (...):
The spread operator is used to expand an iterable (such as an array, string, or object) into its individual elements. 
It allows you to take an array or object and spread its elements or
 properties into another array or object, respectively.

 */
const numbers23 = [1, 2, 3];
const newNumber = [...numbers23, 4, 5, 6, 7];
console.log(newNumber);

//In Objects:
//Spreads the properties of an object into a new object:

const person13 = { name: "John", age: 30 };
const newPerson = { ...person13, country: "USA" };
console.log(newPerson);

function sum5(a, b, c) {
  return a + b + c;
}
const nums6 = [1, 2, 3];
console.log(sum5(...nums6));

/*Rest Operator (...):
The rest operator is used to gather the remaining elements in an array or 
properties in an object into a new array or object. 
It allows you to collect multiple arguments or elements into a single variable.

Usage:

*/

function sum6(a, b, ...rest) {
  console.log(a); // Output: first argument
  console.log(b); // Output: second argument
  console.log(rest); // Output: array of remaining arguments
}
sum6(1, 2, 3, 4, 5); // Output: 1, 2, [3, 4, 5]

//In Destructuring:
//Collects remaining elements in an array or properties in an object into a new array or object:
//javascript

const numbers24 = [1, 2, 3, 4, 5];
const [firstNumb, secondNumb, ...rest] = numbers24;
console.log(firstNumb); // Output: 1
console.log(secondNumb); // Output: 2
console.log(rest); // Output: [3, 4, 5]

const countries11 = [
  "Germany",
  "France",
  "Belgium",
  "Finland",
  "Sweden",
  "Norway",
  "Denmark",
  "Iceland",
];

let [gem, fra, , ...nordicCountries] = countries11;

console.log(gem);
console.log(fra);
console.log(nordicCountries);

const evens = [0, 2, 4, 6, 8, 10];
const evenNumbers = [...evens];

const odds = [1, 3, 5, 7, 9];
const oddNumbers = [...odds];

const wholeNumbers = [...evens, ...odds];

console.log(evenNumbers);
console.log(oddNumbers);
console.log(wholeNumbers);

//Spread operator to copy object
//We can copy an object using a spread operator

const user = {
  name: "Asabeneh",
  title: "Programmer",
  country: "Finland",
  city: "Helsinki",
};

const copiedUser = { ...user };
console.log(copiedUser);

//DAY 15
//TOPIC COVERED - CLASSES

/* Classes
JavaScript is an object oriented programming language. 
Everything in JavScript is an object, with its properties and methods. We create class to create an object.
 A Class is like an object constructor, or a "blueprint" for creating objects. 
 We instantiate a class to create an object. 
 The class defines attributes and the behavior of the object, while the object, on the other hand, 
 represents the class.

 Classes in JavaScript are blueprints for creating objects with specific properties and methods.
They help encapsulate data and behavior, promote code reuse, and support inheritance.
Classes provide a structured way to organize and manage code.
By using classes, you can create clean, efficient, and maintainable code.



Once we create a class we can create object from it whenever we want. 
Creating an object from a class is called class instantiation.
 
Class Instantiation
Instantiation class means creating an object from a class. 
We need the keyword new and we call the name of the class after the word new.
*/

class Person {
  constructor(firstName, lastName) {
    this.firstName = firstName;
    this.lastName = lastName;
    this.age = age;
    this.country = country;
    this.city = city;
  }
}
const person9 = new Person("Asabeneh", "Yetayeh", 250, "Finland", "Helsinki");
console.log(person9);
const person10 = new Person("Lidiya", "Tekle", 26, "USA", "Massachusset");
const person11 = new Person("Abraham", "Yetayeh");
console.log(person10);
console.log(person11);

//Default values with constructor
//The constructor function properties may have a default value like other regular functions.

class Person1 {
  constructor(
    firstName = "Promise",
    lastName = "Nwankwo",
    age = 32,
    country = "Nigeria",
    city = "Lagos"
  ) {
    this.firstName - firstName;
    this.lastName = lastName;
    this.age = age;
    this.country = country;
    this.city = city;
  }
}

const person12 = new Person1();
console.log(person12);
const person14 = new Person1("Lidiya", "Tekle", 28, "Finland", "Espoo");
console.log(person14);

//Class methods
//The constructor inside a class is a builtin function which allow us to create a blueprint for the object.
// In a class we can create class methods.
//Methods are JavaScript functions inside the class. Let us create some class methods.
class Person2 {
  constructor(firstName, lastName) {
    this.firstName = firstName;
    this.lastName = lastName;
    this.age = age;
    this.country = country;
    this.city = city;
  }
  getFullName() {
    const fullName = this.firstName + " " + this.lastName;
    return fullName;
  }
}

const person15 = new Person2("Asabeneh", "Yetayeh", 250, "Finland", "Helsinki");
const person16 = new Person2("Lidiya", "Tekle", 28, "Finland", "Espoo");

console.log(person15.getFullName());
console.log(person16.getFullName());

/*A method could be regular method or a getter or a setter. Let us see, getter and setter.

getter
The get method allow us to access value from the object.
 We write a get method using keyword get followed by a function. 
Instead of accessing properties directly from the object we use getter to get the value.
 See the example below

 */
class Person3 {
  constructor(firstName, lastName, age, country, city) {
    this.firstName = firstName;
    this.lastName = lastName;
    this.age = age;
    this.country = country;
    this.city = city;
    this.score = 0;
    this.skills = [];
  }
  getFullName() {
    const fullName = this.firstName + " " + this.lastName;
    return fullName;
  }

  get getScore() {
    return this.score;
  }

  get getSkill() {
    return this.skills;
  }
}

const person17 = new Person3("Asabeneh", "Yetayeh", 250, "Finland", "Helsinki");
const person18 = new Person3("Lidiya", "Tekle", 28, "Finland", "Espoo");

console.log(person17.getScore); // We do not need parenthesis to call a getter method
console.log(person8.getScore);

console.log(person17.getSkills);
console.log(person18.getSkills);

//setter
//The setter method allow us to modify the value of certain properties.
// We write a setter method using keyword set followed by a function. See the example bellow.

class Person4 {
  constructor(firstName, lastName, age, country, city) {
    this.firstName = firstName;
    this.lastName = lastName;
    this.age = age;
    this.country = country;
    this.city = city;
    this.score = 0;
    this.skills = [];
  }
  getFullName() {
    const fullName = this.firstName + " " + this.lastName;
    return fullName;
  }
  get getScore() {
    return this.score;
  }
  get getSkills() {
    return this.skills;
  }

  set setScore(score) {
    this.score += score;
  }

  set setSkill(skill) {
    this.skills.push(skill);
  }
}

const person19 = new Person4("Asabeneh", "Yetayeh", 250, "Finland", "Helsinki");
const person20 = new Person4("Lidiya", "Tekle", 28, "Finland", "Espoo");

person19.setScore = 1;
person19.setSkill = "HTML";
person19.setSkill = "CSS";
person19.setSkill = "JavaScript";

person20.setScore = 1;
person20.setSkill = "Planning";
person20.setSkill = "Managing";
person20.setSkill = "Organizing";

console.log(person19.score);
console.log(person20.score);

console.log(person19.skills);
console.log(person20.skills);

//Do not be puzzled by the difference between regular method and a getter.
// If you know how to make a regular method you are good.
//Let us add regular method called getPersonInfo in the Person class.

class Person5 {
  constructor(firstName, lastName, age, country, city) {
    this.firstName = firstName;
    this.lastName = lastName;
    this.age = age;
    this.country = country;
    this.city = city;
    this.score = 0;
    this.skills = [];
  }
  getFullName() {
    const fullName = this.firstName + " " + this.lastName;
    return fullName;
  }
  get getScore() {
    return this.score;
  }
  get getSkills() {
    return this.skills;
  }

  set setScore(score) {
    this.score += score;
  }

  set setSkill(skill) {
    this.skills.push(skill);
  }

  getPersonInfo() {
    let fullName = this.getFullName();
    let skills =
      this.skills.length > 0 &&
      this.skills.slice(0, this.skills.length - 1).join(", ") +
        ` and ${this.skills[this.skills.length - 1]}`;
    let formattedSkills = skills ? `He knows ${skills}` : " ";

    let info = `${fullName} is ${this.age}. He lives in ${this.city}, ${this.country}. ${formattedSkills} `;
    return info;
  }
}

const person21 = new Person5("Asabeneh", "Yetayeh", 250, "Finland", "Helsinki");
const person22 = new Person5("Lidiya", "Tekle", 28, "Finland", "Espoo");
const person23 = new Person5("John", "Doe", 50, "Mars", "Mars city");

person21.setScore = 1;
person21.setSkill = "HTML";
person21.setSkill = "CSS";
person21.setSkill = "JavaScript";

person22.setScore = 1;
person22.setSkill = "Planning";
person22.setSkill = "Managing";
person22.setSkill = "Organizing";

console.log(person21.getScore);
console.log(person22.getScore);

console.log(person21.getSkills);
console.log(person22.getSkills);
console.log(person23.getSkills);

console.log(person21.getPersonInfo());
console.log(person22.getPersonInfo());
console.log(person23.getPersonInfo());

/* Static method
The static keyword defines a static method for a class.
 Static methods are not called on instances of the class. Instead, they are called on the class itself. 
 These are often utility functions, such as functions to create or clone objects.
  An example of static method is Date.now().
 The now method is called directly from the class.
 The static methods are methods which can be used as utility functions.

 */
class Person6 {
  constructor(firstName, lastName, age, country, city) {
    this.firstName = firstName;
    this.lastName = lastName;
    this.age = age;
    this.country = country;
    this.city = city;
    this.score = 0;
    this.skills = [];
  }
  getFullName() {
    const fullName = this.firstName + " " + this.lastName;
    return fullName;
  }
  get getScore() {
    return this.score;
  }
  get getSkills() {
    return this.skills;
  }
  set setScore(score) {
    this.score += score;
  }
  set setSkill(skill) {
    this.skills.push(skill);
  }
  getPersonInfo() {
    let fullName = this.getFullName();
    let skills =
      this.skills.length > 0 &&
      this.skills.slice(0, this.skills.length - 1).join(", ") +
        ` and ${this.skills[this.skills.length - 1]}`;

    let formattedSkills = skills ? `He knows ${skills}` : "";

    let info = `${fullName} is ${this.age}. He lives ${this.city}, ${this.country}. ${formattedSkills}`;
    return info;
  }
  static favoriteSkill() {
    const skills = ["HTML", "CSS", "JS", "React", "Python", "Node"];
    const index = Math.floor(Math.random() * skills.length);
    return skills[index];
  }
  static showDateTime() {
    let now = new Date();
    let year = now.getFullYear();
    let month = now.getMonth() + 1;
    let date = now.getDate();
    let hours = now.getHours();
    let minutes = now.getMinutes();
    if (hours < 10) {
      hours = "0" + hours;
    }
    if (minutes < 10) {
      minutes = "0" + minutes;
    }

    let dateMonthYear = date + "." + month + "." + year;
    let time = hours + ":" + minutes;
    let fullTime = dateMonthYear + " " + time;
    return fullTime;
  }
}

console.log(Person6.favoriteSkill());
console.log(Person6.showDateTime());

//Inheritance
//Using inheritance we can access all the properties and the methods of the parent class.
//This reduces repetition of code.
// If you remember, we have a Person parent class and we will create children from it.
//Our children class could be student, teach etc.

class Student extends Person5 {
  saySomething() {
    console.log("I am a child of the person class");
  }
}

const s1 = new Student("Asabeneh", "Yetayeh", "Finland", 250, "Helsinki");
console.log(s1);
console.log(s1.saySomething());
console.log(s1.getFullName());
console.log(s1.getPersonInfo());

//Exercise
//Create an Animal class. The class will have name, age, color, legs properties and create different methods
//Create a Dog and Cat child class from the Animal Class

class Animal {
  constructor(name, age, color, legs) {
    this.name = name;
    this.age = age;
    this.color = color;
    this.legs = legs;
  }

  getInfo() {
    return `${this.name} is a ${this.color} animal with ${this.legs} legs, and is ${this.age} years old.`;
  }
}

// Define the Dog child class that inherits from Animal
class Dog extends Animal {
  // Constructor to initialize properties specific to Dog
  constructor(name, age, color) {
    // Call the parent class constructor with common properties
    super(name, age, color, 4);
  }

  // Method to represent the dog sound
  makeSound() {
    return "Woof woof!";
  }
}

// Define the Cat child class that inherits from Animal
class Cat extends Animal {
  // Constructor to initialize properties specific to Cat
  constructor(name, age, color) {
    // Call the parent class constructor with common properties
    super(name, age, color, 4);
  }

  // Method to represent the cat sound
  makeSound() {
    return "Meow meow!";
  }
}

// Create instances of Dog and Cat
const myDog = new Dog("Buddy", 3, "brown");
const myCat = new Cat("Whiskers", 2, "gray");

// Access properties and methods
console.log(myDog.getInfo()); // Output: Buddy is a brown animal with 4 legs, and is 3 years old.
console.log(myCat.getInfo()); // Output: Whiskers is a gray animal with 4 legs, and is 2 years old.

console.log(myDog.makeSound()); // Output: Woof woof!
console.log(myCat.makeSound()); // Output: Meow meow!
const animal = new Animal("Pupy", 5, "White", 4);
console.log(animal);
//Day 16
//topic covered: JSON

/* JSON stands for JavaScript Object Notation. 
The JSON syntax is derived from JavaScript object notation syntax,
 but the JSON format is text or string only.
  JSON is a light weight data format for storing and transporting. 
  JSON is mostly used when data is sent from a server to a client. 
  JSON is an easier-to-use alternative to XML.

const jsonData = {
  name: "Alice",
  age: 25,
};

const data = JSON.parse(jsonData);
console.log(data);

const jsonObject = { name: "Alice", age: 25 };
const jsonString = JSON.stringify(jsonObject);
console.log(jsonString); // Output: '{"name":"Alice","age":25}'
*/

//DAY 18
//TOPIC COVERED: PROMISES
/* 

Asynchronous operations are tasks or processes in a program that can run independently of the main program flow,
 allowing the program to continue executing other tasks while waiting for the asynchronous operation to complete. 
 This is especially useful for handling operations that may take a long time to finish, 
such as fetching data from a server, processing large files, or performing complex computations.

Key Characteristics of Asynchronous Operations:
Non-Blocking: Asynchronous operations do not block the execution of other code in the program. 
This allows the program to remain responsive, especially in user-facing applications such as web browsers.
Parallel Execution: Asynchronous operations can run in parallel with other tasks, which can improve performance and efficiency.
Callbacks, Promises, and Async/Await: JavaScript provides different ways to handle asynchronous operations,
 including callbacks, promises, and the async/await syntax.



*/

//Callbacks

//A callback function is a function that you pass as an argument to another function.
// The function that receives the callback will call it at the appropriate time,
//usually when a certain event or task is completed.
function greet(name, callback) {
  console.log(`Hello, ${name}`);
  callback();
}

function sayGoodbye() {
  console.log("Goodbye!");
}

greet("Alice", sayGoodbye);

//The greet function is the function that receives another function as an argument.
//In this case, the function it receives as an argument is sayGoodbye.

//Used for Asynchronous Operations
function fetchData(callback) {
  setTimeout(() => {
    const data = "Fetched data";
    callback(data);
  }, 1000); // Simulating a delay of 1 second
}

fetchData((data) => {
  console.log(data); // Output: 'Fetched data' after 1 second
});

// Callback
const doSomething = (callback) => {
  setTimeout(() => {
    const skills = ["HTML", "CSS", "JS"];
    callback("It did not go well", skills);
  }, 2000);
};

const callback1 = (err, result) => {
  if (err) {
    return console.log(err);
  }
  return console.log(result);
};

doSomething(callback1);

/*
A Promise is a way to handle asynchronous operations in JavaScript. 
It allows handlers with an asynchronous action's eventual success value or failure reason. 
In JavaScript, promises are a way to handle asynchronous operations, 
such as fetching data from a server or reading files, in a more organized and easier-to-understand way.

Promise Basics:
Definition: A promise is an object that represents an asynchronous operation, 
which can either succeed (fulfilled) or fail (rejected).
States: A promise can be in one of three states:
Pending: The promise is still in progress.
Fulfilled: The operation was successful, and the promise has a value.
Rejected: The operation failed, and the promise has a reason (error).


Key Concepts to Understand:
Creating Promises:
Promises are created using the Promise constructor.
The constructor takes a function (executor) with resolve and reject parameters.
*/

let myPromise = new Promise((resolve, reject) => {
  setTimeout(() => {
    resolve("Success!"); // or reject('Error!')
  }, 1000);
});

/* Handling Promises:
Promises are handled using .then(), .catch(), and .finally() methods.
.then() handles the fulfillment of the promise.
.catch() handles the rejection of the promise.
.finally() executes code regardless of whether the promise is fulfilled or rejected.


*/
myPromise
  .then((result) => {
    console.log("Result:", result);
  })
  .catch((error) => {
    console.error("Error:", error);
  })
  .finally(() => {
    console.log("Promise has been settled.");
  });

//Promise Chaining:
///Promises can be chained together using .then().

function anotherPromise() {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      resolve("New operation successful");
    }, 1000); // Simulating a delay of 1 second
  });
}

myPromise
  .then((result) => {
    console.log("Result:", result);
    return anotherPromise();
  })
  .then((newResult) => {
    console.log("New Result:", newResult);
  })
  .catch((error) => {
    console.error("Error:", error);
  });

//2nd Example

// Promise
const doPromise = new Promise((resolve, reject) => {
  setTimeout(() => {
    const skills = ["HTML", "CSS", "JS"];
    if (skills.length > 0) {
      resolve(skills);
    } else {
      reject("Something wrong has happened");
    }
  }, 2000);
});

doPromise
  .then((result) => {
    console.log(result);
  })
  .catch((error) => console.log(error));

//Fetch API
//The Fetch API provides an interface for fetching resources (including across the network).
const url = "https://restcountries.com/v2/all"; // countries api
fetch(url)
  .then((response) => response.json()) // accessing the API data as JSON
  .then((data) => {
    // getting the data
    console.log(data);
  })
  .catch((error) => console.error(error)); // handling error if something wrong happens

//Async and Await
//Async and await is an elegant way to handle promises. It is easy to understand and it clean to write.

const square2 = async function (n) {
  return n * n;
};
const value1 = square2(2);
console.log(value1);

const fetchData1 = async () => {
  try {
    const response = await fetch(url);
    const countries = await response.json();
    console.log(countries);
  } catch (err) {
    console.error(err);
  }
};
console.log("===== async and await");
fetchData1();

//DAY 19
//TOPIC COVERED- CLOSURE

//JavaScript allows writing function inside an outer function.
// We can write as many inner functions as we want.
//If inner function access the variables of outer function then it is called closure.

function outerFunction() {
  let count = 0;
  function innerFunction() {
    count++;
    return count;
  }

  return innerFunction;
}
const innerFunc = outerFunction();

console.log(innerFunc());
console.log(innerFunc());
console.log(innerFunc());

//Example

function outerFunction() {
  let count = 0;
  function plusOne() {
    count++;
    return count;
  }
  function minusOne() {
    count--;
    return count;
  }

  return {
    plusOne: plusOne(),
    minusOne: minusOne(),
  };
}
const innerFuncs = outerFunction();

console.log(innerFuncs.plusOne);
console.log(innerFuncs.minusOne);

function outerFunction() {
  const outerVariable = "I am from the outer function";

  function innerFunction() {
    console.log(outerVariable);
  }

  return innerFunction;
}

const closure = outerFunction();
closure(); // Output: 'I am from the outer function'

//DAY 21
//TOPIC COVERED: Document Object Model (DOM)
//HTML document is structured as a JavaScript Object.
// Every HTML element has a different properties which can help to manipulate it.
// It is possible to get, create, append or remove HTML elements using JavaScript.

/* Getting elements by tag name
getElementsByTagName():takes a tag name as a string parameter and this method returns an HTMLCollection object. 
An HTMLCollection is an array like object of HTML elements. 
The length property provides the size of the collection. 
Whenever we use this method we access the individual elements using index or 
after loop through each individual items.
*/

const allTitles = document.getElementsByTagName("h1");
console.log(allTitles); //HTMLCollections
console.log(allTitles.length);

for (let i = 0; i < allTitles.length; i++) {
  console.log(allTitles[i]);
}

/* 

Getting elements by class name
getElementsByClassName() method returns an HTMLCollection object.
 An HTMLCollection is an array like list of HTML elements. 
 The length property provides the size of the collection.
  It is possible to loop through all the HTMLCollection elements. 

*/

const classTitles = document.getElementsByClassName("title");

console.log(classTitles); //HTMLCollections
console.log(classTitles.length); // 4

for (let i = 0; i < classTitles.length; i++) {
  console.log(classTitles[i]); // prints each elements in the HTMLCollection
}

//Getting an element by id
//getElementsById() targets a single HTML element. We pass the id without # as an argument.
let firstTitle = document.getElementById("first-title");
console.log(firstTitle);

/* Getting elements by using querySelector methods
The document.querySelector method can select an HTML or HTML elements by tag name, by id or by class name.

querySelector: can be used to select HTML element by its tag name, id or class. 
If the tag name is used it selects only the first element.

*/

let firstTitle1 = document.querySelector("h1"); // select the first available h1 element
let firstTitle2 = document.querySelector("#first-title"); // select id with first-title
let firstTitle3 = document.querySelector(".title"); // select the first available element with class title

//querySelectorAll: can be used to select html elements by its tag name or class.
//It returns a nodeList which is an array like object which supports array methods.
// We can use for loop or forEach to loop through each nodeList elements.

const allTitles4 = document.querySelectorAll("h1");

console.log(allTitles4.length); // 4
for (let i = 0; i < allTitles4.length; i++) {
  console.log(allTitles4[i]);
}

allTitles4.forEach((title) => console.log(title));
const allTitles5 = document.querySelectorAll(".title"); // the same goes for selecting using class

//Adding attribute
//An attribute is added in the opening tag of HTML which gives additional information about the element.
//Common HTML attributes: id, class, src, style, href,disabled, title, alt.

const titles = document.querySelectorAll("h1");
titles[3].className = "title";
titles[3].id = "fourth-title";

//Adding attribute using setAttribute
//The setAttribute() method set any html attribute.
//It takes two parameters the type of the attribute and the name of the attribute.
//Let's add class and id attribute for the fourth title.

titles[2].setAttribute("class", "third");
titles[2].setAttribute("id", "third");

//Adding attribute without setAttribute
//We can use normal object setting method to set an attribute but this can not work for all elements.
// Some attributes are DOM object property and they can be set directly.
titles[3].className = "title";
titles[3].id = "fourth-title";

//dding class using classList
//The class list method is a good method to append additional class.
//It does not override the original class if a class exists rather it adds additional class for the element.

//another way to setting an attribute: append the class, doesn't over ride
titles[3].classList.add("title", "header-title");

//Removing class using remove
//imilar to adding we can also remove class from an element.
//We can remove a specific class from an element.

//another way to setting an attribute: append the class, doesn't over ride
titles[3].classList.remove("title", "header-title");

//Adding Text to HTML element
//An HTML is a build block of an opening tag, a closing tag and a text content.
// We can add a text content using the property textContent or *innerHTML.

//Adding Text content using textContent
//The textContent property is used to add text to an HTML element.

const titles1 = document.querySelectorAll("h1");
titles1[3].textContent = "Fourth Title";

/*Adding Text Content using innerHTML
Most people get confused between textContent and innerHTML. 
textContent is meant to add text to an HTML element, 
however innerHTML can add a text or HTML element or elements as a child.

Text Content
We assign textContent HTML object property to a text
const titles1 = document.querySelectorAll("h1");
titles1[3].textContent = "Fourth Title";
*/

const lists = `
    <li>30Days Of Python Challenge Done</li>
            <li>30 Days Of JavaScript Challenge Ongoing</li>
            <li>30 Days Of React Challenge Coming</li>
            <li>30 Days Of FullStack Challenge Coming</li>
            <li>30 Days Of Data Analysis Challenge Coming</li>
            <li>30 Days Of React Native Challenge Coming</li>
            <li>30 Days Of Machine Learning Challenge Coming</li>`;
const ul = document.querySelector("ul");
ul.innerHTML = lists;

//dding Style Background Color
//Let us add some style to our titles. If the element has even index we give it green color else red.

const titles2 = document.querySelectorAll("h1");
titles2.forEach((title, i) => {
  title.style.fontSize = "24px"; // all titles will have 24px font size
  if (i % 2 === 0) {
    title.style.backgroundColor = "green";
  } else {
    title.style.backgroundColor = "red";
  }
});

const titles3 = document.querySelectorAll("h1");
titles3.forEach((title, i) => {
  title.style.fontSize = "24px";
  if (i % 2 === 0) {
    title.style.fontSize = "20px";
  } else {
    title.style.fontSize = "30px";
  }
});

//DAY 22
//TOPIC COVERED: DOM(Document Object Model)-Day 2
/*Creating an Element
To create an HTML element we use tag name. 

Creating an HTML element using JavaScript is very simple and straight forward. 
We use the method document.createElement().
 The method takes an HTML element tag name as a string parameter.

 */

let title = document.createElement("h1");
title.className = "title";
title.style.fontSize = "24px";
title.textContent = "Creating HTML element DOM Day 2";
console.log(title);

/* Creating elements
To create multiple elements we should use loop.
 Using loop we can create as many HTML elements as we want.

After we create the element we can assign value to the different properties of the HTML object.
*/

let titleH1;
for (let i = 0; i < 3; i++) {
  titleH1 = document.createElement("h1");
  titleH1.className = "title";
  titleH1.style.fontSize = "24px";

  titleH1.textContent = i;
  console.log(titleH1);
}

/*Appending child to a parent element
To see a created element on the HTML document we should append it to the parent as a child element.
 We can access the HTML document body using document.body.
 The document.body support the appendChild() method. 
 */
let titleA;
for (let i = 0; i < 3; i++) {
  titleA = document.createElement("h1");
  titleA.className = "title";
  titleA.style.fontSize = "24px";
  titleA.textContent = i;
  document.body.appendChild(title);
  console.log(titleA);
}

//DAY 23
//TOPIC COVERED
///Introduction to JavaScript events
/*An event is an action that occurs in the web browser,
which the web browser feedbacks to you so that you can respond to it.
Each event may have an event handler which is a block of code that will execute when the event occurs.

An event handler is also known as an event listener.
It listens to the event and executes when the event occurs.
Event flow has two main models: event bubbling and event capturing.
DOM Level 2 Event specifies that the event flow has three phases: 
nt to an event listener
The event object is accessible only within the event listener.
Use preventDefault() method to prevent the default behavior of an event,
but does not stop the event flow.
Use stopPropagation() method to stop the flow of an event through the DOM tree,
 but does not cancel the browser default behavior.
*/

let btn = document.querySelector("#btn");

function display() {
  alert("It was clicked!");
}

btn.addEventListener("click", display);

/* A shorter way to register an event handler is to place all code in an anonymous function, like this:

let btn = document.querySelector('#btn');

btn.addEventListener('click',function() {
    alert('It was clicked!');
});

An event listener is a function with an explicit name if you intend to reuse it or 
an anonymous function if you only use it once.

An event can be handled by one or multiple event handlers.
 If an event has multiple event handlers, all the event handlers will be executed when the event is fired.

There are three ways to assign event handlers.
*/

//1) HTML event handler attributes

function showAlert() {
  alert("Clicked!");
}

/* Disadvantages of using HTML event handler attributes
Assigning event handlers using HTML event handler attributes is considered
 a bad practice and should be avoided as much as possible for the following reasons:

First, the event handler code is mixed with the HTML code, which will make 
the code more difficult to maintain and extend.

Second, it is a timing issue. If the element is loaded fully before the JavaScript code, 
users can start interacting with the element on the webpage which will cause an error.
*/

//2) DOM Level 0 event handlers
//Each element has event handler properties such as onclick.
//To assign an event handler, you set the property to a function as shown in the example:

//let btn = document.querySelector("#btn");
btn.onClick = function () {
  alert("Clicked!");
};

//To remove the event handler, you set the value of the event handler property to null:
btn.onclick = null;

/* 3) DOM Level 2 event handlers
DOM Level 2 Event Handlers provide two main methods for dealing
 with the registering/deregistering event listeners:

addEventListener() – register an event handler
removeEventListener() – remove an event handler
These methods are available in all DOM nodes.

The addEventListener() method
The addEventListener() method accepts three arguments: an event name, an event handler function, 
and a Boolean value that instructs the method to call the event handler during 
the capture phase (true) or during the bubble phase (false). For example:
*/
//let btn = document.querySelector('#btn');
btn.addEventListener("click", function (event) {
  alert(event.type); // click
});

/* It is possible to add multiple event handlers to handle a single event, like this:

let btn = document.querySelector('#btn');
btn.addEventListener('click',function(event) {
    alert(event.type); // click
});

btn.addEventListener('click',function(event) {
    alert('Clicked!');
});


The removeEventListener() method
The removeEventListener() removes an event listener that was added via the addEventListener(). However, 
you need to pass the same arguments as were passed to the addEventListener(). For example:
*/

//let btn = document.querySelector("#btn");

// add the event listener
/*let showAlert = function () {
  alert("Clicked!");
};
btn.addEventListener("click", showAlert);
*/

// remove the event listener
btn.removeEventListener("click", showAlert);

//JavaScript Page Load Events

/* When you open a page, the following events occur in sequence:

DOMContentLoaded – the browser fully loaded HTML and completed building the DOM tree.
 However, it hasn’t loaded external resources like stylesheets and images. 
 In this event, you can start selecting DOM nodes or initialize the interface.
load – the browser fully loaded the HTML and also external resources like images and stylesheets.
When you leave the page, the following events fire in sequence:

beforeunload – fires before the page and resources are unloaded. 
You can use this event to show a confirmation dialog to confirm if you really want to leave the page. 
By doing this, you can prevent data loss in case you are filling out a form 
and accidentally click a link to navigate to another page.
unload – fires when the page has completely unloaded. 
You can use this event to send the analytic data or to clean up resources.
*/
addEventListener("DOMContentLoaded", (event) => {
  console.log("The DOM is fully loaded.");
});

addEventListener("load", (event) => {
  console.log("The page is fully loaded.");
});

addEventListener("beforeunload", (event) => {
  // show the confirmation dialog
  event.preventDefault();
  // Google Chrome requires returnValue to be set.
  event.returnValue = "";
});

addEventListener("unload", (event) => {
  // send analytic data
});

//Day 24
//TOPIC COVERED: JavaScript Form

const btn1 = document.querySelector("#btn1");
const radioButtons = document.querySelectorAll('input[name="size"]');
btn1.addEventListener("click", () => {
  let selectedSize;
  for (const radioButton of radioButtons) {
    if (radioButton.checked) {
      selectedSize = radioButton.value;
      break;
    }
  }
  // show the output:
  output.innerText = selectedSize
    ? `You selected ${selectedSize}`
    : `You haven't selected any size`;
});

//JavaScript 30

const inventors = [
  { first: "Albert", last: "Einstein", year: 1879, passed: 1955 },
  { first: "Isaac", last: "Newton", year: 1643, passed: 1727 },
  { first: "Galileo", last: "Galilei", year: 1564, passed: 1642 },
  { first: "Marie", last: "Curie", year: 1867, passed: 1934 },
  { first: "Johannes", last: "Kepler", year: 1571, passed: 1630 },
  { first: "Nicolaus", last: "Copernicus", year: 1473, passed: 1543 },
  { first: "Max", last: "Planck", year: 1858, passed: 1947 },
  { first: "Katherine", last: "Blodgett", year: 1898, passed: 1979 },
  { first: "Ada", last: "Lovelace", year: 1815, passed: 1852 },
  { first: "Sarah E.", last: "Goode", year: 1855, passed: 1905 },
  { first: "Lise", last: "Meitner", year: 1878, passed: 1968 },
  { first: "Hanna", last: "Hammarström", year: 1829, passed: 1909 },
];

const people = [
  "Bernhard, Sandra",
  "Bethea, Erin",
  "Becker, Carl",
  "Bentsen, Lloyd",
  "Beckett, Samuel",
  "Blake, William",
  "Berger, Ric",
  "Beddoes, Mick",
  "Beethoven, Ludwig",
  "Belloc, Hilaire",
  "Begin, Menachem",
  "Bellow, Saul",
  "Benchley, Robert",
  "Blair, Robert",
  "Benenson, Peter",
  "Benjamin, Walter",
  "Berlin, Irving",
  "Benn, Tony",
  "Benson, Leana",
  "Bent, Silas",
  "Berle, Milton",
  "Berry, Halle",
  "Biko, Steve",
  "Beck, Glenn",
  "Bergman, Ingmar",
  "Black, Elk",
  "Berio, Luciano",
  "Berne, Eric",
  "Berra, Yogi",
  "Berry, Wendell",
  "Bevan, Aneurin",
  "Ben-Gurion, David",
  "Bevel, Ken",
  "Biden, Joseph",
  "Bennington, Chester",
  "Bierce, Ambrose",
  "Billings, Josh",
  "Birrell, Augustine",
  "Blair, Tony",
  "Beecher, Henry",
  "Biondo, Frank",
];

// Array.prototype.filter()
// 1. Filter the list of inventors for those who were born in the 1500's
const bornIn1500 = inventors.filter(
  (inventor) => inventor.year >= 1500 && inventor.year < 1600
);

console.table(bornIn1500);
// Array.prototype.map()
// 2. Give us an array of the inventors first and last names
const lastFirstName = inventors.map(
  (inventor) => `${inventor.first} ${inventor.last}`
);

console.log(lastFirstName);
// Array.prototype.sort()
// 3. Sort the inventors by birthdate, oldest to youngest
const ordered = inventors.sort(function (a, b) {
  if (a.year > b.year) {
    return 1;
  } else {
    return -1;
  }
});

console.log(ordered);

const orderd1 = inventors.sort((a, b) => (a.year > B.year ? 1 : -1));
console.log(orderd1);
// Array.prototype.reduce()
// 4. How many years did all the inventors live all together?

// 5. Sort the inventors by years lived

// 6. create a list of Boulevards in Paris that contain 'de' anywhere in the name
// https://en.wikipedia.org/wiki/Category:Boulevards_in_Paris

// 7. sort Exercise
// Sort the people alphabetically by last name

// 8. Reduce Exercise
// Sum up the instances of each of these
const data = [
  "car",
  "car",
  "truck",
  "truck",
  "bike",
  "walk",
  "car",
  "van",
  "bike",
  "walk",
  "car",
  "van",
  "car",
  "truck",
];
