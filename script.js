//DAY ONE - INTRODUCTION

//A variable is a “named storage” for data. To create a variable in JavaScript, use the let, const or var keyword.
//We can declare variables to store data by using the var, let, or const keywords.
let message; //variable declaration
message = "Hello, world";
alert(message); // shows the variable content

//To be concise, we can combine the variable declaration and assignment into a single line:

// Declaring different variables of different data types

let firstName = "Asabeneh"; // first name of a person
let lastName = "Yetayeh"; // last name of a person
let country = "Finland"; // country
let city = "Helsinki"; // capital city
let age = 100; // age in years
let isMarried = true;

// Declaring variables with number values

const gravity = 9.81; // earth gravity  in m/s2
const boilingPoint = 100; // water boiling point, temperature in oC
const PI = 3.14; // geometrical constant

// Variables can also be declaring in one line separated by comma

let name = "Asabeneh", //name of a person
  job = "teacher",
  live = "Finland";

//DAY TWO - DATA TYPE

/*

  Data types can be divided into two:

Primitive data types
Non-primitive data types(Object References): Non-primitive data types are modifiable or mutable.
 We can modify the value of non-primitive data types after it gets created.  we do not compare non-primitive data types. Do not compare arrays, functions, or objects. Non-primitive values are referred to as reference types, because they are being compared by reference instead of value.
  Two objects are only strictly equal if they refer to the same underlying object.
Primitive Data Types: Primitive data types are immutable(non-modifiable) data types. 
Once a primitive data type is created we cannot modify it.

Primitive data types in JavaScript include:

Numbers - Integers, floats
Strings - Any data under single quote, double quote or backtick quote
Booleans - true or false value
Null - empty value or no value
Undefined - a declared variable without a value
Symbol - A unique value that can be generated by Symbol constructor

Non-primitive data types in JavaScript includes:

Objects
Arrays

*/

//Non-primitive Data type

let nums = [1, 2, 3];
nums[0] = 10;

console.log(nums); // [10, 2, 3]

let userTwo = {
  name: "Asabeneh",
  role: "teaching",
  country: "Finland",
};

//Numbers
//Numbers are integers and decimal values which can do all the arithmetic operations.
let age1 = 35;
const gravity1 = 9.81; // we use const for non-changing values, gravitational constant in  m/s2
let mass = 72; // mass in Kilogram

// More Examples
const boilingPoint1 = 100; // temperature in oC, boiling point of water which is a constant
const bodyTemp = 37; // oC average human body temperature, which is a constant

console.log(age, gravity, mass, PI, boilingPoint, bodyTemp);

//Random Number Generator
//The JavaScript Math Object has a random() method number generator which generates number from 0 to 0.999999999...

let randomNum = Math.random();
let numBtnZeroAndTen = randomNum * 11;
console.log(numBtnZeroAndTen);
let randomNumRoundToFloor = Math.floor(numBtnZeroAndTen);

console.log(randomNumRoundToFloor);

//Strings

//Strings are texts, which are under single , double, back-tick quote.
//To declare a string, we need a variable name, assignment operator, a value under a single quote, double quote, or backtick quote.
let language = "JavaScript";
let fruit = "Mango";
let quote = "The saying,'Seeing is Believing' is not correct in 2020.";
let quotWithBackTick = `The saying,'Seeing is Believing' is not correct in 2020.`;

//String Concatenation

//Connecting two or more strings together is called concatenation.

let fullName = firstName + " " + lastName; // Concatenating Using Addition Operator
console.log(fullName);

let personInfoOne =
  "My name is " +
  fullName +
  ", I am " +
  age +
  " years old" +
  " I am from" +
  country;
console.log(personInfoOne);

/*

Long Literal Strings
A string could be a single character or paragraph or a page. 
If the string length is too big it does not fit in one line. We can use the backslash character (\) at the end of each line to indicate that the string will continue on the next line.

*/

const paragraph =
  "My name is Asabeneh Yetayeh. I live in Finland, Helsinki.\
I am a teacher and I love teaching. I teach HTML, CSS, JavaScript, React, Redux, \
Node.js, Python, Data Analysis and D3.js for anyone who is interested to learn. \
In the end of 2019, I was thinking to expand my teaching and to reach \
to global audience and I started a Python challenge from November 20 - December 19.\
It was one of the most rewarding and inspiring experience.\
Now, we are in 2020. I am enjoying preparing the 30DaysOfJavaScript challenge and \
I hope you are enjoying too.";

console.log(paragraph);

/*Template Literals (Template Strings)
To create a template strings, we use two back-ticks.
 We can inject data as expressions inside a template string. 
To inject data, we enclose the expression with a curly bracket({}) preceded by a $ sign. 

*/

console.log(`The sum of 2 and 3 is 5`); // statically writing the data
let a = 2;
let b = 3;
console.log(`The sum of ${a} and ${b} is ${a + b}`); // injecting the data dynamically

let personInfoTwo = `I am ${fullName}. I am ${age}. I live in ${country}.`; //ES6 - String interpolation method
let personInfoThree = `I am ${fullName}. I live in ${city}, ${country}. I am a ${job}. I teach ${language}.`;
console.log(personInfoTwo);
console.log(personInfoThree);

//Syntax
`string literal expression`;
//`String literal text ${expression}`;

let ab = 2;
let ba = 3;

console.log(`${ab} is greater than ${ba}: ${ab > ba}`);

//String Methods

//length: The string length method returns the number of characters in a string included empty space.
let js = "JavaScript";
console.log(js.length);

console.log(firstName.length);

//Accessing characters in a string: We can access each character in a string using its index.
// In programming, counting starts from 0.
// The first index of the string is zero, and the last index is the length of the string minus one.

let string = "JavaScript";

let firstLetter = string[0];
console.log(firstLetter);

let thirdLetter = string[2];
console.log(thirdLetter);

let lastLetter = string[9];
console.log(lastLetter);

let lastIndex = string.length - 1;
console.log(string[lastIndex]);

//toUpperCase(): this method changes the string to uppercase letters.

let upperCase = string.toUpperCase();
console.log(upperCase);

//toLowerCase(): this method changes the string to lowercase letters.

let lowerCase = string.toLowerCase();
console.log(lowerCase);

//substr(): It takes two arguments, the starting index and number of characters to slice.
const text = "Hello, world!";
const part = text.substr(7, 5); // Starting at index 7, extract 5 characters
console.log(part); // Output will be "world"

console.log(string.substr(4, 5));

//substring(): It takes two arguments, the starting index and the stopping index
//but it doesn't include the character at the stopping index.

console.log(string.substring(0, 4)); // Java
console.log(string.substring(4, 10)); // Script

let countries = "Finland, Sweden, Norway, Denmark, and Iceland";

let newCountries = countries.split();
console.log(newCountries);
console.log(countries.split(", "));

const texts = "apple,banana,cherry,dragonfruit";
const fruits = texts.split(",", 2); // Split at each comma, but limit to 2 elements
console.log(fruits); // Output will be ["apple", "banana"]

//trim(): Removes trailing space in the beginning or the end of a string.

let string1 = "   30 Days Of JavaScript   ";
console.log(string1.trim());

//includes(): It takes a substring argument and it checks if substring argument exists in the string. includes() returns a boolean.
//If a substring exist in a string, it returns true, otherwise it returns false.

let string2 = "30 Days Of JavaScript";

console.log(string2.includes("Days"));
console.log(string2.includes("days")); // false - it is case sensitive!
console.log(string2.includes("Script")); // true
console.log(string2.includes("script")); // false
console.log(string2.includes("java")); // false
console.log(string2.includes("Java")); // true

//replace(): takes as a parameter the old substring and a new substring.

let string3 = "30 Days Of JavaScript";

console.log(string3.replace("JavaScript", "Python"));

//charAt(): Takes index and it returns the value at that index

console.log(string.charAt(3));

let lastIndex1 = string.length - 1;
console.log(string.charAt(lastIndex1)); // t

//DAY TWO CHALLENGE

let dayTwo = "EXERCISE TWO";
console.log(dayTwo);

//1. Declare a variable named challenge and assign it to an initial value '30 Days Of JavaScript'.

let answer = "30 Days Of JavaScript";

//2. Print the string on the browser console using console.log()
console.log(answer);

//3. Print the length of the string on the browser console using console.log()
console.log(answer.length);

//4. Change all the string characters to capital letters using toUpperCase() method
let answerUpper = answer.toUpperCase();
console.log(answerUpper);

//5. Change all the string characters to lowercase letters using toLowerCase() method
let answerLower = answer.toLowerCase();
console.log(answerLower);

//6. Cut (slice) out the first word of the string using substr() or substring() method
let slicedAnswer = answer.substr(0, 2);

console.log(slicedAnswer);

//Slice out the phrase Days Of JavaScript from 30 Days Of JavaScript.
let startIndex = answer.indexOf("Days");
let length = "Days Of JavaScript".length;

let extractedPhrase = answer.substr(startIndex, length);
console.log(extractedPhrase);

//DAY THREE
//TOPICS: Booleans, Operator and Dates

//Booleans: A boolean data type represents one of the two values:true or false.
//Boolean value is either true or false.

let isLightOn = true;
let isRaining = false;
let isHungry = false;

let truValue = 4 > 3; // true
let falseValue = 4 < 3; // false

/* Truthy values
All numbers(positive and negative) are truthy except zero
All strings are truthy except an empty string ('')
The boolean true

Falsy values
0
0n
null
undefined
NaN
the boolean false
'', "", ``, empty string


Undefined
If we declare a variable and if we do not assign a value, the value will be undefined. In addition to this, 
if a function is not returning the value, it will be undefined.

*/

let firstName1;
console.log(firstName1); //not defined, because it is not assigned to a value yet

//Null
let empty = null;
console.log(empty); // -> null , means no value

//OPERATORS

//Assignment operators
//An equal sign in JavaScript is an assignment operator. It uses to assign a variable.

let firstName2 = "Asabeneh";
let country1 = "Finland";

/* 
Arithmetic Operators
Arithmetic operators are mathematical operators.

Addition(+): a + b
Subtraction(-): a - b
Multiplication(*): a * b
Division(/): a / b
Modulus(%): a % b
Exponential(**): a ** b

*/

let numOne = 4;
let numTwo = 3;
let sum = numOne + numTwo;
let diff = numOne - numTwo;
let mult = numOne * numTwo;
let div = numOne / numTwo;
let remainder = numOne % numTwo;
let powerOf = numOne ** numTwo;

console.log(sum, diff, mult, div, remainder, powerOf); // 7,1,12,1.33,1, 64

//Comparison Operators
//In programming we compare values, we use comparison operators to compare two values.
//We check if a value is greater or less or equal to other value.

//Examples of comparison operators <, >, ==, !=, ===, !==, <=, >=

console.log(3 > 2); // true, because 3 is greater than 2
console.log(3 >= 2); // true, because 3 is greater than 2
console.log(3 < 2); // false,  because 3 is greater than 2
console.log(2 < 3); // true, because 2 is less than 3
console.log(2 <= 3); // true, because 2 is less than 3
console.log(3 == 2); // false, because 3 is not equal to 2
console.log(3 != 2); // true, because 3 is not equal to 2
console.log(3 == "3"); // true, compare only value
console.log(3 === "3");

//Logical Operators

//The following symbols are the common logical operators: &&(ampersand) , ||(pipe) and !(negation).
// The && operator gets true only if the two operands are true.
//The || operator gets true either of the operand is true.
// The ! operator negates true to false and false to true.

// && ampersand operator example

const check1 = 4 > 3 && 10 > 5; // true && true -> true
const check2 = 4 > 3 && 10 < 5; // true && false -> false
const check3 = 4 < 3 && 10 < 5; // false && false -> false

// || pipe or operator, example

const check5 = 4 > 3 || 10 > 5; // true  || true -> true
const check6 = 4 > 3 || 10 < 5; // true  || false -> true
const check7 = 4 < 3 || 10 < 5; // false || false -> false

//! Negation examples

let check8 = 4 > 3; // true
let check9 = !(4 > 3); //  false
let isLightOn1 = true;
let isLightOff = !isLightOn; // false
let isMarried1 = !false; // true

//Increment Operator

//In JavaScript we use the increment operator to increase a value stored in a variable.
//The increment could be pre or post increment.

//Pre-increment
let count = 5;
console.log(++count); //6
console.log(count); //6

//Post-increment

let count1 = 5;
console.log(count1++); // 5
console.log(count1); // 6

//Decrement Operator
//In JavaScript we use the decrement operator to decrease a value stored in a variable.
//The decrement could be pre or post decrement.

//Pre-decrement (--variable)
let x = 5;
let result = --x; // x is decremented to 4 first, then result is set to 6
console.log(result); // Output: 4
console.log(x); // Output: 4

//Post-decrement (--variable)
let y = 5;
let result1 = y--; // result is set to 5 first, then y is decremented to 5
console.log(result1); // Output: 5
console.log(y); // Output: 4

//Ternary Operators: Ternary operator allows to write a condition.
let isRaining1 = true;
isRaining1
  ? console.log("You need a Rain coat.")
  : console.log("You don't need a Rain coat.");
isRaining1 = false;
isRaining1
  ? console.log("You need a Rain coat.")
  : console.log("You don't need a Rain coat.");

let number = 5;
number > 0
  ? console.log(`${number} is a positive mumber`)
  : console.log(`${number} is a negative mumber`);

number = -5;
number > 0
  ? console.log(`${number} is a positive mumber`)
  : console.log(`${number} is a negative mumber`);

/*
  Date Object
Time is an important thing. We like to know the time a certain activity or event. 
In JavaScript current time and date is created using JavaScript Date Object. 
The object we create using Date object provides many methods to work with date and time.
The methods we use to get date and time information from a date object values are started with a word get 
because it provide the information. 
getFullYear(), getMonth(), getDate(), getDay(), getHours(), 
getMinutes, getSeconds(), getMilliseconds(), getTime(), getDay()

*/

//Creating a time object

let now = new Date();
console.log(now);

//Get year
console.log(now.getFullYear());

//Get month
console.log(now.getMonth());

//Get Day
console.log(now.getDay());

const year = now.getFullYear(); // return year
const month = now.getMonth() + 1; // return month(0 - 11)
const date = now.getDate(); // return date (1 - 31)
const hours = now.getHours(); // return nu darn number (0 -59)
const minutes = now.getMinutes();

console.log(`${date}/${month}/${year} ${hours}:${minutes}`); // 4/1/2020 0:56

//DAY THREE
//TOPICS: Conditionals

//Conditional statements are used for make decisions based on different conditions.
// By default , statements in JavaScript script executed sequentially from top to bottom.
//Conditional execution: a block of one or more statements will be executed if a certain expression is true
//Repetitive execution: a block of one or more statements will be repetitively executed as long as a certain expression is true.
//In this section, we will cover if, else , else if statements.

/*

Conditions can be implementing using the following ways:

if
if else
if else if else
switch
ternary operator


If
In JavaScript and other programming languages the key word if is to used check if a condition is true
 and to execute the block code. To create an if condition, we need if keyword, 
 condition inside a parenthesis and block of code inside a curly bracket({}).
*/

/*

syntax
if (condition) {
  //this part of code runs for truthy condition
}

*/

let num = 3;
if (num > 0) {
  console.log(`${num} is a positive number.`);
}

let iAmHungry = true;

if (iAmHungry) {
  console.log("Get me food.");
}

//If Else
// condition is true the first block will be executed, if not the else condition will be executed.

/*
// syntax
if (condition) {
  // this part of code runs for truthy condition
} else {
  // this part of code runs for false condition
}

*/
let num1 = 5;
if (num1 > 0) {
  console.log(`${num1} is a positive number.`);
} else {
  console.log(`${num1} is a negative number.`);
}

num1 = -3;
if (num1 > 0) {
  console.log(`${num1} is a positive number`);
} else {
  console.log(`${num1} is a negative number`);
}
//  -3 is a negative number

//If Else if Else
//programming is also full of conditions. We use else if when we have multiple conditions.

/* // syntax
if (condition) {
     // code
} else if (condition) {
   // code
} else {
    //  code

}
*/

let aa = 0;
if (aa > 0) {
  console.log(`${aa} is a positive number`);
} else if (aa < 0) {
  console.log(`${aa} is a negative number`);
} else if (a == 0) {
  console.log(`${aa} is zero`);
} else {
  console.log(`${aa} is not a number`);
}

let weatherCondition = "Sunny";

if (weatherCondition == "Rainy") {
  console.log("You need an umbrella");
} else if (weatherCondition == "Cloudy") {
  console.log("It might be cold, you need a jacket");
} else if (weatherCondition == "Sunny") {
  console.log("Go out freely");
} else {
  console.log("No need for rain coat.");
}

/*
Switch
Switch is an alternative for if else if else else.
 The switch statement starts with a switch keyword followed by a parenthesis and code block. 
 Inside the code block we will have different cases.
  Case block runs if the value in the switch statement parenthesis matches with the case value. 
  The break statement is to terminate execution so the code execution does not go down after
   the condition is satisfied. 
  The default block runs if all the cases don't satisfy the condition.

switch(caseValue){
  case 1:
    // code
    break
  case 2:
   // code
   break
  case 3:
   // code
   break
  default:
   // code
}

*/

let weather = "cloudy";
switch (weather) {
  case "Rainy":
    console.log("You need an umbrella");
    break;
  case "Sunny":
    console.log("Go out freely");
    break;
  case "Cloudy":
    console.log("It might be cold, you need a jacket");
    break;
  default:
    console.log(" No need for rain coat.");
}
let dayUserInput = prompt("What day is today?");
if (dayUserInput) {
  // If the user entered a value, convert it to lowercase
  let day = dayUserInput.toLowerCase();

  switch (day) {
    case "monday":
      console.log("Today is Monday");
      break;
    case "tuesday":
      console.log("Today is Tuesday");
      break;
    case "wednesday":
      console.log("Today is Wednesday");
      break;
    case "thursday":
      console.log("Today is Thursday");
      break;
    case "friday":
      console.log("Today is Friday");
      break;
    case "saturday":
      console.log("Today is Saturday");
      break;
    case "sunday":
      console.log("Today is Sunday");
      break;
    default:
      console.log("Not a valid weekday");
  }
} else {
  console.log("Input was null or empty");
}

let num2 = prompt("Enter number");
switch (true) {
  case num2 > 0:
    console.log("Number is positive");
    break;
  case num2 == 0:
    console.log("Numbers is zero");
    break;
  case num2 < 0:
    console.log("Number is negative");
    break;
  default:
    console.log("Entered value was not a number");
}

//Ternary Operators
//Another way to write conditionals is using ternary operators.
let isNotRaining = true;
isNotRaining
  ? console.log("No need for a rain coat.")
  : console.log("you need for a rain coat.");

//Exercise

/*

Get user input using prompt(“Enter your age:”). If user is 18 or older , give feedback:'You are old enough to drive' but if not 18 give another feedback stating to wait for the number of years he needs to turn 18.

Enter your age: 30
You are old enough to drive.

Enter your age:15
You are left with 3 years to drive.
*/

let age2 = prompt("Enter your age");
if (age2 >= 18) {
  console.log("You are old enough to drive.");
} else {
  let yearsLeft = 18 - age2;
  console.log(`You are left with ${yearsLeft} to .`);
}

//Exercise 2

/* Compare the values of myAge and yourAge using if … else. Based on the comparison and log the result to console stating who is older (me or you). Use prompt(“Enter your age:”) to get the age as input.

Enter your age: 30
You are 5 years older than me.

*/

let myAge = 18;
let yourAge = prompt("Enter Your Age");

if (yourAge > myAge) {
  let newAge = yourAge - myAge;
  console.log(`You are ${newAge} years older than me`);
} else if (yourAge < myAge) {
  let newAge = myAge - yourAge;

  console.log(`I am ${newAge} years older than you`);
} else {
  console.log("We are the same age.");
}

/* If a is greater than b return 'a is greater than b' else 'a is less than b'. Try to implement it in to ways

using if else
ternary operator.
  let a = 4
  let b = 3
  4 is greater than 3

  */
let ac = 4;
let bc = 3;

if (ac > bc) {
  console.log(`${ac} is greater than ${bc}`);
} else {
  console.log(`${ac} is less than ${bc}`);
}

ac > bc
  ? console.log(`${ac} is greater than ${bc}`)
  : console.log(`${ac} is less than ${bc}`);

/* Even numbers are divisible by 2 and the remainder is zero. How do you check, 
if a number is even or not using JavaScript?

Enter a number: 2
2 is an even number

Enter a number: 9
9 is is an odd number.

*/

let num3 = prompt("Enter Number");

let numResult = Number(num3);
if (numResult % 2 === 0) {
  console.log(`${numResult} is an even number.`);
} else {
  console.log(`${numResult} is an odd number.`);
}

/* 
Write a code which can give grades to students according to theirs scores:
80-100, A
70-89, B
60-69, C
50-59, D
0-49, F

*/

let scoreInput = prompt("Enter score");

let score = Number(scoreInput);

if (score >= 80 && score <= 100) {
  console.log("Grade: A");
} else if (score >= 70 && score < 80) {
  console.log("Grade: B");
} else if (score >= 60 && score < 70) {
  console.log("Grade: C");
} else if (score >= 50 && score < 60) {
  console.log("Grade: D");
} else if (score >= 0 && score < 50) {
  console.log("Grade: F");
} else {
  console.log("Invalid score. Please enter a score between 0 and 100.");
}

/* Check if the season is Autumn, Winter, Spring or Summer. If the user input is :
September, October or November, the season is Autumn.
December, January or February, the season is Winter.
March, April or May, the season is Spring
June, July or August, the season is Summer
*/
let month1 = prompt("Enter Month");

let newMonth = month1.toLowerCase();

if (
  newMonth === "september" ||
  newMonth === "october" ||
  newMonth === "november"
) {
  console.log("The season is Autumn");
} else if (
  newMonth === "december" ||
  newMonth === "january" ||
  newMonth === "february"
) {
  console.log("The season is Winter");
} else if (newMonth === "march" || newMonth === "april" || newMonth === "may") {
  console.log("The season is Spring");
} else if (
  newMonth === "june" ||
  newMonth === "july" ||
  newMonth === "august"
) {
  console.log("The season is Summer");
} else {
  console.log("Invalid Month");
}

/* Check if a day is weekend day or a working day. Your script will take day as an input.
    What is the day  today? Saturday
    Saturday is a weekend.

    What is the day today? saturDaY
    Saturday is a weekend.

    What is the day today? Friday
    Friday is a working day.

    What is the day today? FrIDAy
    Friday is a working day.

    */

let day = prompt("Enter the day of the week");

if (day === "Saturday" || day === "Sunday") {
  console.log(`${day} is a weekend.`);
} else {
  console.log(`${day} is a working day.`);
}

//DAY FIVE
//TOPIC: ARRAYS

/* In contrast to variables, an array can store multiple values.
 Each value in an array has an index, and each index has a reference in a memory address.
 Each value can be accessed by using their indexes. 
The index of an array starts from zero, 
and the index of the last element is less by one from the length of the array.
An array is a collection of different data types which are ordered and changeable(modifiable).
 An array allows storing duplicate elements and different data types. 
An array can be empty, or it may have different data type values.


How to create an empty array
In JavaScript, we can create an array in different ways. 
Let us see different ways to create an array. 
It is very common to use const instead of let to declare an array variable.
 If you ar using const it means you do not use that variable name again.
*/

//1. Using Array constructor
// syntax
const arr = Array();
// or
// let arr = new Array()
console.log(arr); // []

//2. Using square brackets([])
// syntax
// This the most recommended way to create an empty list
const arr2 = [];
console.log(arr2);

//HOW TO CREATE ARRAYS

const numbers = [0, 3.14, 9.81, 37, 98.6, 100]; // array of numbers

const vegetables = ["Tomato", "Potato", "Cabbage", "Onion", "Carrot"]; // array of strings, vegetables
const animalProducts = ["milk", "meat", "butter", "yoghurt"]; // array of strings, products
const webTechs = ["HTML", "CSS", "JS", "React", "Redux", "Node", "MongDB"]; // array of web technologies

// Print the array and its length

console.log("Numbers:", numbers);
console.log("Number of numbers:", numbers.length);

console.log("Vegetables:", vegetables);
console.log("Number of vegetables:", vegetables.length);

console.log("Animal products:", animalProducts);
console.log("Number of animal products:", animalProducts.length);

console.log("Web technologies:", webTechs);
console.log("Number of web technologies:", webTechs.length);

//Array can have items of different data types
const arr3 = [
  "Asabeneh",
  250,
  true,
  { country: "Finland", city: "Helsinki" },
  { skills: ["HTML", "CSS", "JS", "React", "Python"] },
]; // arr containing different data types
console.log(arr3);

let jScript = "JavaScript";
const charsInJavaScript = jScript.split("");

console.log(charsInJavaScript); // ["J", "a", "v", "a", "S", "c", "r", "i", "p", "t"]

let companiesString = "Facebook, Google, Microsoft, Apple, IBM, Oracle, Amazon";
let companies = companiesString.split(" , ");

console.log(companies);

let txt =
  "I love teaching and empowering people. I teach HTML, CSS, JS, React, Python.";
let words = txt.split("  ");

//Accessing array items using index
//We access each element in an array using their index. An array index starts from 0.

const fruits2 = ["banana", "orange", "mango", "lemon"];
let firstFruit = fruits2[0]; // we are accessing the first item using its index

console.log(firstFruit); // banana

secondFruit = fruits2[1];
console.log(secondFruit); // orange

let lastFruit = fruits2[3];
console.log(lastFruit); // lemon
// Last index can be calculated as follows

let lastIndex2 = fruits2.length - 1;
lastFruit = fruits[lastIndex];

console.log(lastFruit); // lemon

const numbers3 = [0, 3.14, 9.81, 37, 98.6, 100]; // set of numbers

console.log(numbers3.length); // => to know the size of the array, which is 6
console.log(numbers3); // -> [0, 3.14, 9.81, 37, 98.6, 100]
console.log(numbers3[0]); //  -> 0
console.log(numbers3[5]); //  -> 100

let lastIndex3 = numbers3.length - 1;
console.log(numbers3[lastIndex]); // -> 100

const webTechs1 = [
  "HTML",
  "CSS",
  "JavaScript",
  "React",
  "Redux",
  "Node",
  "MongoDB",
]; // List of web technologies

console.log(webTechs1); // all the array items
console.log(webTechs1.length); // => to know the size of the array, which is 7
console.log(webTechs1[0]); //  -> HTML
console.log(webTechs1[6]); //  -> MongoDB

let lastIndex4 = webTechs1.length - 1;
console.log(webTechs1[lastIndex4]); // -> MongoDB

const shoppingCart = [
  "Milk",
  "Mango",
  "Tomato",
  "Potato",
  "Avocado",
  "Meat",
  "Eggs",
  "Sugar",
]; // List of food products

console.log(shoppingCart); // -> all shoppingCart in array
console.log(shoppingCart[0]); //  -> Milk
console.log(shoppingCart[7]); //  -> Sugar

let lastIndex5 = shoppingCart.length - 1;
console.log(shoppingCart[lastIndex5]); //  -> Sugar

//Modifying array element
//An array is mutable(modifiable). Once an array is created, we can modify the contents of the array elements.

const numbers1 = [1, 2, 3, 4, 5];
numbers1[0] = 10;
numbers1[3] = 20;
console.log(numbers1);

const countries2 = [
  "Albania",
  "Bolivia",
  "Canada",
  "Denmark",
  "Ethiopia",
  "Finland",
  "Germany",
  "Hungary",
  "Ireland",
  "Japan",
  "Kenya",
];

countries2[2] = "Nigeria";
let lastOfIndex = countries2.length - 1;
console.log(lastOfIndex);
countries2[lastOfIndex] = "Korea";
console.log(countries2);

//Methods to manipulate array
//There are different methods to manipulate an array.
//These are some of the available methods to deal with arrays:Array,
//length, concat, indexOf, slice, splice, join, toString, includes,
//lastIndexOf, isArray, fill, push, pop, shift, unshift

const arr1 = Array(); // creates an an empty array
console.log(arr1);

const eightEmptyValues = Array(8);
console.log(eightEmptyValues); // [empty x 8]

//Creating static values with fill
//fill: Fill all the array elements with a static value

const eightXvalues = Array(8).fill("X"); // it creates eight element values filled with 'X'
console.log(eightXvalues); // ['X', 'X','X','X','X','X','X','X']

const eight0values = Array(8).fill(0);
console.log(eight0values);

const four4values = Array(4).fill(4);
console.log(four4values);

//Concatenating array using concat
//concat:To concatenate two arrays.

const firstList = [1, 2, 3];
const secondList = [4, 5, 6];
const thirdList = firstList.concat(secondList);

console.log(thirdList);

const fruits1 = ["banana", "orange", "mango", "lemon"]; // array of fruits
const vegetables1 = ["Tomato", "Potato", "Cabbage", "Onion", "Carrot"]; // array of vegetables
const fruitsAndVegetables = fruits1.concat(vegetables1);

console.log(fruitsAndVegetables);

//Getting array length
//Length:To know the size of the array

console.log(fruitsAndVegetables.length);

//Getting index an element in arr array
//indexOf:To check if an item exist in an array.
//If it exists it returns the index else it returns -1.

const numbers4 = [1, 2, 3, 4, 5];

console.log(numbers4.indexOf(2));
console.log(numbers4.indexOf(5)); // -> 4
console.log(numbers4.indexOf(0)); // -> -1
console.log(numbers4.indexOf(1)); // -> 0
console.log(numbers4.indexOf(6)); // -> -1

//Check an element if it exist in an array.

//Check items in a list

const fruits3 = ["banana", "orange", "mango", "lemon"];
let index = fruits3.indexOf("banana"); // 0

if (index === -1) {
  console.log("Fruit does not exist in the array");
} else {
  console.log("This fruit does exist in the array");
}

index === -1
  ? console.log("Fruit does not exist in the array")
  : console.log("This fruit does exist in the array");

let indexOfAvocado = fruits3.indexOf("avocado");

if (index === -1) {
  console.log("Fruit does not exist in the array");
} else {
  console.log("This fruit does exist in the array");
}

//Getting last index of an element in array
//lastIndexOf: It gives the position of the last item in the array.
//If it exist, it returns the index else it returns -1.

const numbers5 = [1, 2, 3, 4, 5, 3, 1, 2];

console.log(numbers5.lastIndexOf(2)); // 7
console.log(numbers5.lastIndexOf(0)); // -1
console.log(numbers5.lastIndexOf(1)); //  6
console.log(numbers5.lastIndexOf(4)); //  3
console.log(numbers5.lastIndexOf(6)); // -1

//includes:To check if an item exist in an array. If it exist it returns the true else it returns false.

console.log(numbers5.includes(5));
console.log(numbers5.includes(6));
console.log(numbers5.includes(3));

const webTechs3 = [
  "HTML",
  "CSS",
  "JavaScript",
  "React",
  "Redux",
  "Node",
  "MongoDB",
]; // List of web technologies

console.log(webTechs3.includes("Node")); // true
console.log(webTechs3.includes("C")); // false

//Checking array
//Array.isArray:To check if the data type is an array

const numbers6 = [1, 2, 3, 4, 5];
console.log(Array.isArray(numbers)); // true

const number1 = 100;
console.log(Array.isArray(number1)); // false

//Converting array to string
//toString:Converts array to string

const numb = [1, 2, 3, 4, 5];
console.log(numb.toString());

const names = ["Asabeneh", "Mathias", "Elias", "Brook"];
console.log(names.toString()); // Asabeneh,Mathias,Elias,Brook

//Joining array elements
//join: It is used to join the elements of the array,
//the argument we passed in the join method will be joined in the array and return as a string.
//By default, it joins with a comma, but we can pass different string parameter which can be joined between the items.

const numbers7 = [1, 2, 3, 4, 5];
console.log(numbers7.join()); // 1,2,3,4,5

const names2 = ["Asabeneh", "Mathias", "Elias", "Brook"];

console.log(names2.join()); // Asabeneh,Mathias,Elias,Brook
console.log(names2.join("")); //AsabenehMathiasEliasBrook
console.log(names2.join(" ")); //Asabeneh Mathias Elias Brook
console.log(names2.join(", ")); //Asabeneh, Mathias, Elias, Brook
console.log(names2.join(" # ")); //Asabeneh # Mathias # Elias # Brook

const webTechs4 = [
  "HTML",
  "CSS",
  "JavaScript",
  "React",
  "Redux",
  "Node",
  "MongoDB",
]; // List of web technologies

console.log(webTechs4.join()); // "HTML,CSS,JavaScript,React,Redux,Node,MongoDB"
console.log(webTechs4.join(" # ")); // "HTML # CSS # JavaScript # React # Redux # Node # MongoDB"

//Splice method in array
//Splice: It takes three parameters:Starting position, number of times to be removed and number of items to be added.

const numbers8 = [1, 2, 3, 4, 5];
numbers8.splice();
console.log(numbers8); // -> remove all items

const numbers9 = [1, 2, 3, 4, 5];
numbers9.splice(0, 1);
console.log(numbers9); // remove the first item

const numbers10 = [1, 2, 3, 4, 5, 6];
numbers10.splice(3, 3, 7, 8, 9);
console.log(numbers10.splice(3, 3, 7, 8, 9)); // -> [1, 2, 3, 7, 8, 9] //it removes three item and replace three items

//Adding item to an array using push
//Push: adding item in the end. To add item to the end of an existing array we use the push method.

const numbers11 = [1, 2, 3, 4, 5];
numbers11.push(6);
console.log(numbers11); // -> [1,2,3,4,5,6]

numbers11.pop(); // -> remove one item from the end
console.log(numbers11); // -> [1,2,3,4,5]

let fruits4 = ["banana", "orange", "mango", "lemon"];
fruits4.push("apple");
console.log(fruits4); // ['banana', 'orange', 'mango', 'lemon', 'apple']

fruits4.push("lime");
console.log(fruits4); // ['banana', 'orange', 'mango', 'lemon', 'apple', 'lime']

//Removing the end element using pop
//pop: Removing item in the end.

const numbers12 = [1, 2, 3, 4, 5];
numbers12.pop(); // -> remove one item from the end
console.log(numbers12); // -> [1,2,3,4]

//Removing an element from the beginning
//shift: Removing one array element in the beginning of the array.

const numbers13 = [1, 2, 3, 4, 5];
numbers13.shift(); // -> remove one item from the beginning
console.log(numbers13); // -> [2,3,4,5]

//Add an element from the beginning
//unshift: Adding array element in the beginning of the array.

const numbers14 = [1, 2, 3, 4, 5];
numbers14.unshift(0); // -> add one item from the beginning
console.log(numbers14); // -> [0,1,2,3,4,5]

//Reversing array order
//reverse: reverse the order of an array.

const numbers15 = [1, 2, 3, 4, 5];
numbers15.reverse(); // -> reverse array order
console.log(numbers15); // [5, 4, 3, 2, 1]

numbers15.reverse();
console.log(numbers15); // [1, 2, 3, 4, 5]

//Sorting elements in array
//sort: arrange array elements in ascending order. Sort takes a call back function,
//we will see how we use sort with a call back function in the coming sections.

const webTechs5 = [
  "HTML",
  "CSS",
  "JavaScript",
  "React",
  "Redux",
  "Node",
  "MongoDB",
];

webTechs5.sort();
console.log(webTechs5); // ["CSS", "HTML", "JavaScript", "MongoDB", "Node", "React", "Redux"]

webTechs5.reverse(); // after sorting we can reverse it
console.log(webTechs5); // ["Redux", "React", "Node", "MongoDB", "JavaScript", "HTML", "CSS"]

//Array of arrays
//Array can store different data types including an array itself. Let us create an array of arrays.

const firstNums = [1, 2, 3];
const secondNums = [1, 4, 9];

const arrayOfArray = [
  [1, 2, 3],
  [1, 2, 3],
];
console.log(arrayOfArray[0]); // [1, 2, 3]

const frontEnd = ["HTML", "CSS", "JS", "React", "Redux"];
const backEnd = ["Node", "Express", "MongoDB"];
const fullStack = [frontEnd, backEnd];
console.log(fullStack); // [["HTML", "CSS", "JS", "React", "Redux"], ["Node", "Express", "MongoDB"]]
console.log(fullStack.length); // 2
console.log(fullStack[0]); // ["HTML", "CSS", "JS", "React", "Redux"]
console.log(fullStack[1]); // ["Node", "Express", "MongoDB"]

//EXERCISES
const countries5 = [
  "Albania",
  "Bolivia",
  "Canada",
  "Denmark",
  "Ethiopia",
  "Finland",
  "Germany",
  "Hungary",
  "Ireland",
  "Japan",
  "Kenya",
];

const webTechs6 = [
  "HTML",
  "CSS",
  "JavaScript",
  "React",
  "Redux",
  "Node",
  "MongoDB",
];

//Declare an empty array;

let arr4 = Array();

//Declare an array with more than 5 number of elements
// Declare an array with more than 5 elements
const figures = [10, 20, 30, 40, 50, 60, 70, 80];

// Log the array to the console
console.log(figures);

//Find the length of your array
let arrayLength = figures.length;

//Get the first item, the middle item and the last item of the array
console.log(figures[0]);
console.log(figures[4]);
console.log(figures.length - 1);

//DAY SIX
//TOPIC: LOOPS

//A loop in JavaScript is a way to tell the computer to do something over and over again until you tell it to stop.

/* for Loop:
Imagine you want to count from 1 to 10. A for loop helps you do this easily.
You tell the computer three things:
Where to start (let i = 1;).
When to stop (i <= 10;).
How to count (i++ which means "add 1 each time").

*/

for (let i = 0; i <= 5; i++) {
  console.log(i);
}

for (let i = 5; i >= 0; i--) {
  console.log(i);
}

// 5 4 3 2 1 0

for (let i = 0; i <= 5; i++) {
  console.log(`${i} * ${i} = ${i * i}`);
}

const numbers16 = [1, 2, 3, 4, 5];
let sum1 = 0;
for (let i = 0; i < numbers.length; i++) {
  sum1 = sum1 + numbers[i]; // can be shorten, sum += numbers[i]
}

console.log(sum1); // 15

const countries7 = ["Finland", "Sweden", "Norway", "Denmark", "Iceland"];
const newArr = [];
for (let i = 0; i < countries7.length; i++) {
  newArr.push(countries7[i].toUpperCase());
}

console.log(newArr); // ["FINLAND", "SWEDEN", "NORWAY", "DENMARK", "ICELAND"]

//while Loop:
//This loop repeats an action as long as a certain condition is true.
var i = 0;
while (i < 10) {
  console.log(i);
  i++;
}

//do...while Loop:
//This loop is similar to the while loop, but it always runs at least once, even if the condition is false at the start.

var i = 0;
do {
  console.log(i);
  i++;
} while (i <= 10);

//For of loop
//We use for of loop for arrays.
//It is very hand way to iterate through an array if we are not interested in the index of each element in the array.

const numbers17 = [1, 2, 3, 4, 5];

for (const num of numbers17) {
  console.log(num);
}

for (const num of numbers17) {
  console.log(num * num);
}

const webTechs7 = [
  "HTML",
  "CSS",
  "JavaScript",
  "React",
  "Redux",
  "Node",
  "MongoDB",
];

for (const tech of webTechs7) {
  console.log(tech.toUpperCase());
}

const countries8 = ["Finland", "Sweden", "Norway", "Denmark", "Iceland"];
const newAr1 = [];

for (const country of countries8) {
  newAr1.push(country.toUpperCase());
}

//break
//Break is used to interrupt a loop.
for (i = 0; i < 10; i++) {
  if (i == 3) {
    break;
  }
  console.log(i);
}

//continue
//We use the keyword continue to skip a certain iterations.
for (let i = 0; i <= 5; i++) {
  if (i == 3) {
    continue;
  }
  console.log(i);
}

//Exercise
/* 
Write a loop that makes the following pattern using console.log():

    #
    ##
    ###
    ####
    #####
    ######
    #######

    */

const numberOfRows = 7;

for (let i = 1; i <= numberOfRows; i++) {
  let pattern = "#".repeat(i);
  console.log(pattern);
}

/* 
Use loop to print the following pattern:

0 x 0 = 0
1 x 1 = 1
2 x 2 = 4
3 x 3 = 9
4 x 4 = 16
5 x 5 = 25
6 x 6 = 36
7 x 7 = 49
8 x 8 = 64
9 x 9 = 81
10 x 10 = 100

*/

for (let i = 0; i <= 10; i++) {
  console.log(`${i} * ${i} = ${i * i}`);
}

/* 
Using loop print the following pattern

 i    i^2   i^3
 0    0     0
 1    1     1
 2    4     8
 3    9     27
 4    16    64
 5    25    125
 6    36    216
 7    49    343
 8    64    512
 9    81    729
 10   100   1000

 */

for (let i = 0; i <= 10; i++) {
  const iSquared = i * i;
  const iCubed = i * i * i;

  console.log(`${i}  ${iSquared} ${iCubed}`);
}

//DAY SIX
//TOPIC: FUNCTIONS

/*

A function is a reusable block of code or programming statements designed to perform a certain task.
 A function is declared by a function key word followed by a name, followed by parentheses (). 
 A parentheses can take a parameter.
  If a function take a parameter it will be called with argument. 
  A function can also take a default parameter.
   To store a data to a function, a function has to return certain data types. 
   Declare a function
To declare a function, you use the function keyword, followed by the function name, 
a list of parameters, and the function body as follows:
Calling a function
To use a function, you need to call it. Calling a function is also known as invoking a function.
 To call a function, you use its name followed by arguments enclosing in parentheses like this.
 When calling a function, JavaScript executes the code inside the function body. 
 Returning a value
Every function in JavaScript implicitly returns undefined unless you explicitly specify a return value.
   To get the value we call or invoke a function. Function makes code:

clean and easy to read
reusable
easy to test

A function can be declared or created in couple of ways:

Declaration function
Expression function
Anonymous function
Arrow function

*/

//Function without a parameter and return
//Function can be declared without a parameter.

function square() {
  let num = 2;
  let sq = num * num;
  console.log(sq);
}

square();

function addTwoNumbers() {
  let numOne = 10;
  let numTwo = 20;
  let sum = numOne + numTwo;

  console.log(sum);
}

addTwoNumbers();

function printFullName() {
  let firstName = "Asabeneh";
  let lastName = "Yetayeh";
  let space = " ";
  let fullName = firstName + space + lastName;
  console.log(fullName);
}

printFullName(); // calling a function

//Function returning value
//Function can also return values, if a function does not return values the value of the function is undefined.

function printFullName() {
  let firstName = "Asabeneh";
  let lastName = "Yetayeh";
  let space = " ";
  let fullName = firstName + space + lastName;
  return fullName;
}

printFullName(); // calling a function

function addTwoNumbers() {
  let numOne = 2;
  let numTwo = 3;
  let total = numOne + numTwo;
  return total;
}

console.log(addTwoNumbers());

//Function with a parameter
//In a function we can pass different data types(number, string, boolean, object, function) as a parameter.

function square(num) {
  return num * num;
}

console.log(square(10));

//Function with two parameters

function sumTwoNumbers(numOne, numTwo) {
  let sum = numOne + numTwo;
  console.log(sum);
}
sumTwoNumbers(10, 20); // calling functions
// If a function doesn't return it doesn't store data, so it should return

function printFullName(firstName, LastName) {
  return `${firstName} ${lastName}`;
}

console.log(printFullName("Asabeneh", "Yetayeh"));

//Function with unlimited number of parameters
//Sometimes we do not know how many arguments the user going to pass.
//Therefore, we should know how to write a function which can take unlimited number of arguments.
// Let us access the arguments object

function sumAllNums() {
  console.log(arguments);
}

sumAllNums(1, 2, 3, 4);
// Arguments(4) [1, 2, 3, 4, callee: ƒ, Symbol(Symbol.iterator): ƒ]

function sumAllNums() {
  let sum = 0;
  for (let i = 0; i < arguments.length; i++) {
    sum += arguments[i];
  }
  return sum;
}

console.log(sumAllNums(1, 2, 3, 4)); // 10
console.log(sumAllNums(10, 20, 13, 40, 10)); // 93
console.log(sumAllNums(15, 20, 30, 25, 10, 33, 40)); // 173

// function declaration
const sumAllNums1 = (...args) => {
  let sum = 0;
  for (const element of args) {
    sum += element;
  }
  return sum;
};

console.log(sumAllNums1(1, 2, 3, 4)); // 10
console.log(sumAllNums1(10, 20, 13, 40, 10)); // 93
console.log(sumAllNums1(15, 20, 30, 25, 10, 33, 40)); // 173

//Anonymous function
//An anonymous function is not accessible after its initial creation.
// Therefore, you often need to assign it to a variable.
const anonymousFun = function () {
  console.log(
    "I am an anonymous function and my value is stored in anonymousFun"
  );
};

//Expression Function
//Expression functions are anonymous functions.
//After we create a function without a name and we assign it to a variable.
//To return a value from the function we should call the variable.

const square1 = function (n) {
  return n * n;
};

console.log(square1(2));

//Self Invoking Functions
//Self invoking functions are anonymous functions which do not need to be called to return a value.
(function (n) {
  console.log(n * n);
})(10);

let squaredNum = (function (n) {
  return n * n;
})(2);
console.log(squaredNum);

//Arrow Function
//Arrow function is an alternative to write a function.
//Arrow function uses arrow instead of the keyword function to declare a function.

let sentence = () => {
  console.log("She is a girl");
};
sentence();

let sqaureNum = (n) => {
  return n * n;
};

console.log(sqaureNum(6));

const changeToUpperCase = (arr) => {
  const newArr = [];
  for (const element of arr) {
    newArr.push(element.toUpperCase());
  }
  return newArr;
};

const countries1 = ["Finland", "Sweden", "Norway", "Denmark", "Iceland"];
console.log(changeToUpperCase(countries1));

const printFullName1 = (firstName, lastName) => {
  return `${firstName} ${lastName}`;
};

console.log(printFullName1("Promise", "Nwankwo"));

const printFullName3 = (firstName, lastName) => `${firstName} ${lastName}`;
console.log(printFullName1("Promise", "Nwankwo"));

//Function with default parameters
//Sometimes we pass default values to parameters, when we invoke the function
//if we do not pass an argument the default value will be used.

function greetings(name = "Peter") {
  let message = `${name}, welcome to 30 Days Of JavaScript!`;
  return message;
}

console.log(greetings());
console.log(greetings("Asabeneh"));

function generateFullName(firstName = "Asabeneh", lastName = "Yetayeh") {
  let space = " ";
  let fullName = firstName + space + lastName;
  return fullName;
}

console.log(generateFullName());
console.log(generateFullName("David", "Smith"));

const greeting = (name = "Peter") => {
  let message = name + ", welcome to 30 Days Of JavaScript!";
  return message;
};

console.log(greeting());
console.log(greeting("Asabeneh"));

//Function hoisting
//In JavaScript, you can use a function before declaring it. For example:
showMe(); // a hoisting example

function showMe() {
  console.log("an hoisting example");
}

//This feature is called hoisting.

//Function hoisting is a mechanism which the JavaScript engine physically moves
// function declarations to the top of the code before executing them.

//Introduction to the JavaScript recursive functions
//A recursive function is a function that calls itself until it doesn’t.
//This technique is called recursion.
function recurse() {
  if (condition) {
    // stop calling itself
    //...
  } else {
    recurse();
  }
}

//Exercises: Level 1
//Declare a function fullName and it print out your full name.
//Declare a function fullName and now it takes firstName, lastName as a parameter and it returns your full - name.

function getFullName(firstName, lastName) {
  return `My name is ${firstName} ${lastName}`;
}

console.log(getFullName("Promise", "Nwankwo"));

//DAY SEVEN
//TOPIC: SCOPE AND OBJECT

//Variables scopes can be:

//Global
//Local
//Variable can be declared globally or locally scope.

//scope.js
a = "JavaScript"; // declaring a variable without let or const make it available in window object and this found anywhere
b = 10; // this is a global scope variable and found in the window object
function letsLearnScope() {
  console.log(a, b);
  if (true) {
    console.log(a, b);
  }
}
console.log(a, b); // accessible

//Local scope
//A variable declared as local can be accessed only in certain block code.

//Block Scope
//Function Scope

//scope.js
let A = "JavaScript"; // is a global scope it will be found anywhere in this file
let B = 10; // is a global scope it will be found anywhere in this file
// Function scope
function letsLearnScope() {
  console.log(A, B); // JavaScript 10, accessible
  let value = false;
  // block scope
  if (true) {
    // we can access from the function and outside the function but
    // variables declared inside the if will not be accessed outside the if block
    let A = "Python";
    let B = 20;
    let c = 30;
    let d = 40;
    value = !value;
    console.log(A, B, c, value); // Python 20 30 true
  }
  // we can not access c because c's scope is only the if block
  console.log(A, B, value); // JavaScript 10 true
}
letsLearnScope();
console.log(A, B); // JavaScript 10, accessible

function exampleFunction() {
  var functionScopedVar = "I am available throughout the function";

  if (true) {
    let blockScopedLet = "I am only available in this block";
    const blockScopedConst = "I am only available in this block";
    console.log(functionScopedVar); // This works
    console.log(blockScopedLet); // This works
    console.log(blockScopedConst); // This works
  }

  console.log(functionScopedVar); // This works
  // The following lines would cause errors because `blockScopedLet` and `blockScopedConst` are not available outside the block:
  // console.log(blockScopedLet);
  // console.log(blockScopedConst);
}

//Object
//Everything can be an object and objects do have properties and properties have values,
//so an object is a key value pair.
//Creating an empty object
//An empty object
//Introduction to the JavaScript object methods
//An object is a collection of key/value pairs or properties.
//When the value is a function, the property becomes a method.
//Typically, you use methods to describe the object’s behaviors.
let person5 = {
  firstName: "John",
  lastName: "Doe",
};

person5.greet = function () {
  console.log("Hello");
};

person5.greet();
const person = {};

//Creating an objecting with values
const rectangle = {
  length: 20,
  width: 20,
};
console.log(rectangle); // {length: 20, width: 20}

const person1 = {
  firstName: "Asabeneh",
  lastName: "Yetayeh",
  age: 250,
  country: "Finland",
  city: "Helsinki",
  skills: [
    "HTML",
    "CSS",
    "JavaScript",
    "React",
    "Node",
    "MongoDB",
    "Python",
    "D3.js",
  ],
  isMarried: true,
};
console.log(person1);

//Getting values from an object
//We can access values of object using two methods:

//using . followed by key name if the key-name is a one word
//using square bracket and a quote

const person2 = {
  firstName: "Asabeneh",
  lastName: "Yetayeh",
  age: 250,
  country: "Finland",
  city: "Helsinki",
  skills: [
    "HTML",
    "CSS",
    "JavaScript",
    "React",
    "Node",
    "MongoDB",
    "Python",
    "D3.js",
  ],
  getFullName: function () {
    return `${this.firstName}${this.lastName}`;
  },
  "phone number": "+3584545454545",
};

// accessing values using .
console.log(person2.firstName);
console.log(person2.lastName);
console.log(person2.age);
console.log(person2.location); // undefined

// value can be accessed using square bracket and key name
console.log(person2["firstName"]);
console.log(person2["lastName"]);
console.log(person2["age"]);
console.log(person2["age"]);
console.log(person2["location"]); // undefined

// for instance to access the phone number we only use the square bracket method
console.log(person2["phone number"]);

//Object Methods
//There are different methods to manipulate an object. Let us see some of the available methods.

//Object.assign: To copy an object without modifying the original object

const person3 = {
  firstName: "Asabeneh",
  age: 250,
  country: "Finland",
  city: "Helsinki",
  skills: ["HTML", "CSS", "JS"],
  title: "teacher",
  address: {
    street: "Heitamienkatu 16",
    pobox: 2002,
    city: "Helsinki",
  },
  getPersonInfo: function () {
    return `I am ${this.firstName} and I live in ${this.city}, ${this.country}. I am ${this.age}.`;
  },
};

//Object methods: Object.assign, Object.keys, Object.values, Object.entries
//hasOwnProperty

const copyPerson = Object.assign({}, person3);
console.log(copyPerson);

//Getting object keys using Object.keys()
//Object.keys: To get the keys or properties of an object as an array
const keys = Object.keys(copyPerson);
console.log(keys); //['firstName', 'age', 'country','city', 'skills','title', 'address', 'getPersonInfo']
const address = Object.keys(copyPerson.address);
console.log(address); //['street', 'pobox', 'city']

//Getting object values using Object.values()
//Object.values:To get values of an object as an array

const values = Object.values(copyPerson);
console.log(values);

//Getting object keys and values using Object.entries()
//Object.entries:To get the keys and values in an array

const entries = Object.entries(copyPerson);
console.log(entries);

/* Exercises: Level 1
Create an empty object called dog
Print the the dog object on the console
Add name, legs, color, age and bark properties for the dog object. The bark property is a method which return woof woof
Get name, legs, color, age and bark value from the dog object
Set new properties the dog object: breed, getDogInfo
*/

let dog = {};
console.log(dog);

// Add properties to the dog object
dog.name = "Buddy";
dog.legs = 4;
dog.color = "brown";
dog.age = 5;

dog.bark = function () {
  return "woof woof";
};

// Print the values of the properties and the result of the bark method
console.log(`Name: ${dog.name}`);
console.log(`Legs: ${dog.legs}`);
console.log(`Color: ${dog.color}`);
console.log(`Age: ${dog.age}`);
console.log(`Bark: ${dog.bark()}`);

// Set new properties for the dog object
dog.breed = "Golden Retriever";
dog.getDogInfo = function () {
  return `The dog's name is ${this.name}, a ${this.age}-year-old ${
    this.color
  } ${this.breed}. It has ${
    this.legs
  } legs. When it barks, it goes ${this.bark()}.`;
};

//DAY 8
//TOPIC COVERED: Higher Order Function
//Higher order functions are functions which take other function as a parameter or return a function as a value.
// The function passed as a parameter is called callback.
// a callback function, the name of the function could be any name
const callback = (n) => {
  return n ** 2;
};

// function that takes other function as a callback
function cube(callback, n) {
  return callback(n) * n;
}

console.log(cube(callback, 3));

//Returning function
//Higher order functions return function as a value​

// Higher order function returning an other function
const higherOrder = (n) => {
  const doSomething = (m) => {
    const doWhatEver = (t) => {
      return 2 * n + 3 * m + t;
    };
    return doWhatEver;
  };
  return doSomething;
};
console.log(higherOrder(2)(3)(10));

/* Setting time
In JavaScript we can execute some activities in a certain interval of time or we can schedule(wait) for some time to execute some activities.

setInterval
setTimeout
Setting Interval using a setInterval function
In JavaScript, we use setInterval higher order function to do some activity continuously with in some interval of time. The setInterval global method take a callback function and a duration as a parameter. 
The duration is in milliseconds and the callback will be always called in that interval of time.

*/
function sayHello() {
  console.log("Hello");
}
setInterval(sayHello, 1000); // it prints hello in every second, 1000ms is 1s

/*Setting a time using a setTimeout
In JavaScript, we use setTimeout higher order function
 to execute some action at some time in the future.
  The setTimeout global method take a callback function and a duration as a parameter. 
The duration is in milliseconds and the callback wait for that amount of time.
*/
function sayHell1o() {
  console.log("Hello");
}
setTimeout(sayHello, 2000); // it prints hello after it waits for 2 seconds.

/*
Functional Programming
Instead of writing regular loop, latest version of JavaScript introduced 
lots of built in methods which can help us to solve complicated problems. 
All builtin methods take callback function. In this section, we will see forEach, 
map, filter, reduce, find, every, some, and sort.

forEach
forEach: Iterate an array elements. We use forEach only with arrays. 
It takes a callback function with elements, index parameter and array itself. 
The index and the array optional.
*/
