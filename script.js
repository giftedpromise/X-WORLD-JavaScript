//DAY ONE - INTRODUCTION

//A variable is a “named storage” for data. To create a variable in JavaScript, use the let, const or var keyword.
//We can declare variables to store data by using the var, let, or const keywords.
let message; //variable declaration
message = "Hello, world";
alert(message); // shows the variable content

//To be concise, we can combine the variable declaration and assignment into a single line:

// Declaring different variables of different data types

let firstName = "Asabeneh"; // first name of a person
let lastName = "Yetayeh"; // last name of a person
let country = "Finland"; // country
let city = "Helsinki"; // capital city
let age = 100; // age in years
let isMarried = true;

// Declaring variables with number values

const gravity = 9.81; // earth gravity  in m/s2
const boilingPoint = 100; // water boiling point, temperature in oC
const PI = 3.14; // geometrical constant

// Variables can also be declaring in one line separated by comma

let name = "Asabeneh", //name of a person
  job = "teacher",
  live = "Finland";

//DAY TWO - DATA TYPE

/*

  Data types can be divided into two:

Primitive data types
Non-primitive data types(Object References): Non-primitive data types are modifiable or mutable.
 We can modify the value of non-primitive data types after it gets created.  we do not compare non-primitive data types. Do not compare arrays, functions, or objects. Non-primitive values are referred to as reference types, because they are being compared by reference instead of value.
  Two objects are only strictly equal if they refer to the same underlying object.
Primitive Data Types: Primitive data types are immutable(non-modifiable) data types. 
Once a primitive data type is created we cannot modify it.

Primitive data types in JavaScript include:

Numbers - Integers, floats
Strings - Any data under single quote, double quote or backtick quote
Booleans - true or false value
Null - empty value or no value
Undefined - a declared variable without a value
Symbol - A unique value that can be generated by Symbol constructor

Non-primitive data types in JavaScript includes:

Objects
Arrays

*/

//Non-primitive Data type

let nums = [1, 2, 3];
nums[0] = 10;

console.log(nums); // [10, 2, 3]

let userTwo = {
  name: "Asabeneh",
  role: "teaching",
  country: "Finland",
};

//Numbers
//Numbers are integers and decimal values which can do all the arithmetic operations.
let age1 = 35;
const gravity1 = 9.81; // we use const for non-changing values, gravitational constant in  m/s2
let mass = 72; // mass in Kilogram

// More Examples
const boilingPoint1 = 100; // temperature in oC, boiling point of water which is a constant
const bodyTemp = 37; // oC average human body temperature, which is a constant

console.log(age, gravity, mass, PI, boilingPoint, bodyTemp);

//Random Number Generator
//The JavaScript Math Object has a random() method number generator which generates number from 0 to 0.999999999...

let randomNum = Math.random();
let numBtnZeroAndTen = randomNum * 11;
console.log(numBtnZeroAndTen);
let randomNumRoundToFloor = Math.floor(numBtnZeroAndTen);

console.log(randomNumRoundToFloor);

//Strings

//Strings are texts, which are under single , double, back-tick quote.
//To declare a string, we need a variable name, assignment operator, a value under a single quote, double quote, or backtick quote.
let language = "JavaScript";
let fruit = "Mango";
let quote = "The saying,'Seeing is Believing' is not correct in 2020.";
let quotWithBackTick = `The saying,'Seeing is Believing' is not correct in 2020.`;

//String Concatenation

//Connecting two or more strings together is called concatenation.

let fullName = firstName + " " + lastName; // Concatenating Using Addition Operator
console.log(fullName);

let personInfoOne =
  "My name is " +
  fullName +
  ", I am " +
  age +
  " years old" +
  " I am from" +
  country;
console.log(personInfoOne);

/*

Long Literal Strings
A string could be a single character or paragraph or a page. 
If the string length is too big it does not fit in one line. We can use the backslash character (\) at the end of each line to indicate that the string will continue on the next line.

*/

const paragraph =
  "My name is Asabeneh Yetayeh. I live in Finland, Helsinki.\
I am a teacher and I love teaching. I teach HTML, CSS, JavaScript, React, Redux, \
Node.js, Python, Data Analysis and D3.js for anyone who is interested to learn. \
In the end of 2019, I was thinking to expand my teaching and to reach \
to global audience and I started a Python challenge from November 20 - December 19.\
It was one of the most rewarding and inspiring experience.\
Now, we are in 2020. I am enjoying preparing the 30DaysOfJavaScript challenge and \
I hope you are enjoying too.";

console.log(paragraph);

/*Template Literals (Template Strings)
To create a template strings, we use two back-ticks.
 We can inject data as expressions inside a template string. 
To inject data, we enclose the expression with a curly bracket({}) preceded by a $ sign. 

*/

console.log(`The sum of 2 and 3 is 5`); // statically writing the data
let a = 2;
let b = 3;
console.log(`The sum of ${a} and ${b} is ${a + b}`); // injecting the data dynamically

let personInfoTwo = `I am ${fullName}. I am ${age}. I live in ${country}.`; //ES6 - String interpolation method
let personInfoThree = `I am ${fullName}. I live in ${city}, ${country}. I am a ${job}. I teach ${language}.`;
console.log(personInfoTwo);
console.log(personInfoThree);

//Syntax
`string literal expression`;
//`String literal text ${expression}`;

let ab = 2;
let ba = 3;

console.log(`${ab} is greater than ${ba}: ${ab > ba}`);

//String Methods

//length: The string length method returns the number of characters in a string included empty space.
let js = "JavaScript";
console.log(js.length);

console.log(firstName.length);

//Accessing characters in a string: We can access each character in a string using its index.
// In programming, counting starts from 0.
// The first index of the string is zero, and the last index is the length of the string minus one.

let string = "JavaScript";

let firstLetter = string[0];
console.log(firstLetter);

let thirdLetter = string[2];
console.log(thirdLetter);

let lastLetter = string[9];
console.log(lastLetter);

let lastIndex = string.length - 1;
console.log(string[lastIndex]);

//toUpperCase(): this method changes the string to uppercase letters.

let upperCase = string.toUpperCase();
console.log(upperCase);

//toLowerCase(): this method changes the string to lowercase letters.

let lowerCase = string.toLowerCase();
console.log(lowerCase);

//substr(): It takes two arguments, the starting index and number of characters to slice.
const text = "Hello, world!";
const part = text.substr(7, 5); // Starting at index 7, extract 5 characters
console.log(part); // Output will be "world"

console.log(string.substr(4, 5));

//substring(): It takes two arguments, the starting index and the stopping index
//but it doesn't include the character at the stopping index.

console.log(string.substring(0, 4)); // Java
console.log(string.substring(4, 10)); // Script

let countries = "Finland, Sweden, Norway, Denmark, and Iceland";

let newCountries = countries.split();
console.log(newCountries);
console.log(countries.split(", "));

const texts = "apple,banana,cherry,dragonfruit";
const fruits = texts.split(",", 2); // Split at each comma, but limit to 2 elements
console.log(fruits); // Output will be ["apple", "banana"]

//trim(): Removes trailing space in the beginning or the end of a string.

let string1 = "   30 Days Of JavaScript   ";
console.log(string1.trim());

//includes(): It takes a substring argument and it checks if substring argument exists in the string. includes() returns a boolean.
//If a substring exist in a string, it returns true, otherwise it returns false.

let string2 = "30 Days Of JavaScript";

console.log(string2.includes("Days"));
console.log(string2.includes("days")); // false - it is case sensitive!
console.log(string2.includes("Script")); // true
console.log(string2.includes("script")); // false
console.log(string2.includes("java")); // false
console.log(string2.includes("Java")); // true

//replace(): takes as a parameter the old substring and a new substring.

let string3 = "30 Days Of JavaScript";

console.log(string3.replace("JavaScript", "Python"));

//charAt(): Takes index and it returns the value at that index

console.log(string.charAt(3));

let lastIndex1 = string.length - 1;
console.log(string.charAt(lastIndex1)); // t

//DAY TWO CHALLENGE

let dayTwo = "EXERCISE TWO";
console.log(dayTwo);

//1. Declare a variable named challenge and assign it to an initial value '30 Days Of JavaScript'.

let answer = "30 Days Of JavaScript";

//2. Print the string on the browser console using console.log()
console.log(answer);

//3. Print the length of the string on the browser console using console.log()
console.log(answer.length);

//4. Change all the string characters to capital letters using toUpperCase() method
let answerUpper = answer.toUpperCase();
console.log(answerUpper);

//5. Change all the string characters to lowercase letters using toLowerCase() method
let answerLower = answer.toLowerCase();
console.log(answerLower);

//6. Cut (slice) out the first word of the string using substr() or substring() method
let slicedAnswer = answer.substr(0, 2);

console.log(slicedAnswer);

//Slice out the phrase Days Of JavaScript from 30 Days Of JavaScript.
let startIndex = answer.indexOf("Days");
let length = "Days Of JavaScript".length;

let extractedPhrase = answer.substr(startIndex, length);
console.log(extractedPhrase);

//DAY THREE
//TOPICS: Booleans, Operator and Dates

//Booleans: A boolean data type represents one of the two values:true or false.
//Boolean value is either true or false.

let isLightOn = true;
let isRaining = false;
let isHungry = false;

let truValue = 4 > 3; // true
let falseValue = 4 < 3; // false

/* Truthy values
All numbers(positive and negative) are truthy except zero
All strings are truthy except an empty string ('')
The boolean true

Falsy values
0
0n
null
undefined
NaN
the boolean false
'', "", ``, empty string


Undefined
If we declare a variable and if we do not assign a value, the value will be undefined. In addition to this, 
if a function is not returning the value, it will be undefined.

*/

let firstName1;
console.log(firstName1); //not defined, because it is not assigned to a value yet

//Null
let empty = null;
console.log(empty); // -> null , means no value

//OPERATORS

//Assignment operators
//An equal sign in JavaScript is an assignment operator. It uses to assign a variable.

let firstName2 = "Asabeneh";
let country1 = "Finland";

/* 
Arithmetic Operators
Arithmetic operators are mathematical operators.

Addition(+): a + b
Subtraction(-): a - b
Multiplication(*): a * b
Division(/): a / b
Modulus(%): a % b
Exponential(**): a ** b

*/

let numOne = 4;
let numTwo = 3;
let sum = numOne + numTwo;
let diff = numOne - numTwo;
let mult = numOne * numTwo;
let div = numOne / numTwo;
let remainder = numOne % numTwo;
let powerOf = numOne ** numTwo;

console.log(sum, diff, mult, div, remainder, powerOf); // 7,1,12,1.33,1, 64

//Comparison Operators
//In programming we compare values, we use comparison operators to compare two values.
//We check if a value is greater or less or equal to other value.

//Examples of comparison operators <, >, ==, !=, ===, !==, <=, >=

console.log(3 > 2); // true, because 3 is greater than 2
console.log(3 >= 2); // true, because 3 is greater than 2
console.log(3 < 2); // false,  because 3 is greater than 2
console.log(2 < 3); // true, because 2 is less than 3
console.log(2 <= 3); // true, because 2 is less than 3
console.log(3 == 2); // false, because 3 is not equal to 2
console.log(3 != 2); // true, because 3 is not equal to 2
console.log(3 == "3"); // true, compare only value
console.log(3 === "3");

//Logical Operators

//The following symbols are the common logical operators: &&(ampersand) , ||(pipe) and !(negation).
// The && operator gets true only if the two operands are true.
//The || operator gets true either of the operand is true.
// The ! operator negates true to false and false to true.

// && ampersand operator example

const check1 = 4 > 3 && 10 > 5; // true && true -> true
const check2 = 4 > 3 && 10 < 5; // true && false -> false
const check3 = 4 < 3 && 10 < 5; // false && false -> false

// || pipe or operator, example

const check5 = 4 > 3 || 10 > 5; // true  || true -> true
const check6 = 4 > 3 || 10 < 5; // true  || false -> true
const check7 = 4 < 3 || 10 < 5; // false || false -> false

//! Negation examples

let check8 = 4 > 3; // true
let check9 = !(4 > 3); //  false
let isLightOn1 = true;
let isLightOff = !isLightOn; // false
let isMarried1 = !false; // true

//Increment Operator

//In JavaScript we use the increment operator to increase a value stored in a variable.
//The increment could be pre or post increment.

//Pre-increment
let count = 5;
console.log(++count); //6
console.log(count); //6

//Post-increment

let count1 = 5;
console.log(count1++); // 5
console.log(count1); // 6

//Decrement Operator
//In JavaScript we use the decrement operator to decrease a value stored in a variable.
//The decrement could be pre or post decrement.

//Pre-decrement (--variable)
let x = 5;
let result = --x; // x is decremented to 4 first, then result is set to 6
console.log(result); // Output: 4
console.log(x); // Output: 4

//Post-decrement (--variable)
let y = 5;
let result1 = y--; // result is set to 5 first, then y is decremented to 5
console.log(result1); // Output: 5
console.log(y); // Output: 4

//Ternary Operators: Ternary operator allows to write a condition.
let isRaining1 = true;
isRaining1
  ? console.log("You need a Rain coat.")
  : console.log("You don't need a Rain coat.");
isRaining1 = false;
isRaining1
  ? console.log("You need a Rain coat.")
  : console.log("You don't need a Rain coat.");

let number = 5;
number > 0
  ? console.log(`${number} is a positive mumber`)
  : console.log(`${number} is a negative mumber`);

number = -5;
number > 0
  ? console.log(`${number} is a positive mumber`)
  : console.log(`${number} is a negative mumber`);

/*
  Date Object
Time is an important thing. We like to know the time a certain activity or event. 
In JavaScript current time and date is created using JavaScript Date Object. 
The object we create using Date object provides many methods to work with date and time.
The methods we use to get date and time information from a date object values are started with a word get 
because it provide the information. 
getFullYear(), getMonth(), getDate(), getDay(), getHours(), 
getMinutes, getSeconds(), getMilliseconds(), getTime(), getDay()

*/

//Creating a time object

let now = new Date();
console.log(now);

//Get year
console.log(now.getFullYear());

//Get month
console.log(now.getMonth());

//Get Day
console.log(now.getDay());

const year = now.getFullYear(); // return year
const month = now.getMonth() + 1; // return month(0 - 11)
const date = now.getDate(); // return date (1 - 31)
const hours = now.getHours(); // return nu darn number (0 -59)
const minutes = now.getMinutes();

console.log(`${date}/${month}/${year} ${hours}:${minutes}`); // 4/1/2020 0:56

//DAY THREE
//TOPICS: Conditionals

//Conditional statements are used for make decisions based on different conditions.
// By default , statements in JavaScript script executed sequentially from top to bottom.
//Conditional execution: a block of one or more statements will be executed if a certain expression is true
//Repetitive execution: a block of one or more statements will be repetitively executed as long as a certain expression is true.
//In this section, we will cover if, else , else if statements.

/*

Conditions can be implementing using the following ways:

if
if else
if else if else
switch
ternary operator


If
In JavaScript and other programming languages the key word if is to used check if a condition is true
 and to execute the block code. To create an if condition, we need if keyword, 
 condition inside a parenthesis and block of code inside a curly bracket({}).
*/

/*

syntax
if (condition) {
  //this part of code runs for truthy condition
}

*/

let num = 3;
if (num > 0) {
  console.log(`${num} is a positive number.`);
}

let iAmHungry = true;

if (iAmHungry) {
  console.log("Get me food.");
}

//If Else
// condition is true the first block will be executed, if not the else condition will be executed.

/*
// syntax
if (condition) {
  // this part of code runs for truthy condition
} else {
  // this part of code runs for false condition
}

*/
let num1 = 5;
if (num1 > 0) {
  console.log(`${num1} is a positive number.`);
} else {
  console.log(`${num1} is a negative number.`);
}

num1 = -3;
if (num1 > 0) {
  console.log(`${num1} is a positive number`);
} else {
  console.log(`${num1} is a negative number`);
}
//  -3 is a negative number

//If Else if Else
//programming is also full of conditions. We use else if when we have multiple conditions.

/* // syntax
if (condition) {
     // code
} else if (condition) {
   // code
} else {
    //  code

}
*/

let aa = 0;
if (aa > 0) {
  console.log(`${aa} is a positive number`);
} else if (aa < 0) {
  console.log(`${aa} is a negative number`);
} else if (a == 0) {
  console.log(`${aa} is zero`);
} else {
  console.log(`${aa} is not a number`);
}

let weatherCondition = "Sunny";

if (weatherCondition == "Rainy") {
  console.log("You need an umbrella");
} else if (weatherCondition == "Cloudy") {
  console.log("It might be cold, you need a jacket");
} else if (weatherCondition == "Sunny") {
  console.log("Go out freely");
} else {
  console.log("No need for rain coat.");
}
